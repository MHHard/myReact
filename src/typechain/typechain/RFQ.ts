/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace RFQ {
  export type QuoteStruct = {
    srcChainId: BigNumberish;
    srcToken: string;
    srcAmount: BigNumberish;
    srcReleaseAmount: BigNumberish;
    dstChainId: BigNumberish;
    dstToken: string;
    dstAmount: BigNumberish;
    deadline: BigNumberish;
    nonce: BigNumberish;
    sender: string;
    receiver: string;
    refundTo: string;
    liquidityProvider: string;
  };

  export type QuoteStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string
  ] & {
    srcChainId: BigNumber;
    srcToken: string;
    srcAmount: BigNumber;
    srcReleaseAmount: BigNumber;
    dstChainId: BigNumber;
    dstToken: string;
    dstAmount: BigNumber;
    deadline: BigNumber;
    nonce: BigNumber;
    sender: string;
    receiver: string;
    refundTo: string;
    liquidityProvider: string;
  };
}

export interface RFQInterface extends utils.Interface {
  contractName: "RFQ";
  functions: {
    "addGovernor(address)": FunctionFragment;
    "addPauser(address)": FunctionFragment;
    "collectFee(address)": FunctionFragment;
    "dstTransfer((uint64,address,uint256,uint256,uint64,address,uint256,uint64,uint64,address,address,address,address))": FunctionFragment;
    "dstTransferNative((uint64,address,uint256,uint256,uint64,address,uint256,uint64,uint64,address,address,address,address))": FunctionFragment;
    "executeMessage(bytes,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransferRefund(address,uint256,bytes,address)": FunctionFragment;
    "executeRefund((uint64,address,uint256,uint256,uint64,address,uint256,uint64,uint64,address,address,address,address),bytes)": FunctionFragment;
    "executeRefundNative((uint64,address,uint256,uint256,uint64,address,uint256,uint64,uint64,address,address,address,address),bytes)": FunctionFragment;
    "feePercGlobal()": FunctionFragment;
    "feePercOverride(uint64)": FunctionFragment;
    "getMsgFee(bytes)": FunctionFragment;
    "getQuoteHash((uint64,address,uint256,uint256,uint64,address,uint256,uint64,uint64,address,address,address,address))": FunctionFragment;
    "getRfqFee(uint64,uint256)": FunctionFragment;
    "governors(address)": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "isPauser(address)": FunctionFragment;
    "messageBus()": FunctionFragment;
    "nativeWrap()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pausers(address)": FunctionFragment;
    "protocolFee(address)": FunctionFragment;
    "quotes(bytes32)": FunctionFragment;
    "remoteRfqContracts(uint64)": FunctionFragment;
    "removeGovernor(address)": FunctionFragment;
    "removePauser(address)": FunctionFragment;
    "renounceGovernor()": FunctionFragment;
    "renouncePauser()": FunctionFragment;
    "requestRefund((uint64,address,uint256,uint256,uint64,address,uint256,uint64,uint64,address,address,address,address))": FunctionFragment;
    "sameChainTransfer((uint64,address,uint256,uint256,uint64,address,uint256,uint64,uint64,address,address,address,address),bool)": FunctionFragment;
    "sameChainTransferNative((uint64,address,uint256,uint256,uint64,address,uint256,uint64,uint64,address,address,address,address),bool)": FunctionFragment;
    "setFeePerc(uint64[],uint32[])": FunctionFragment;
    "setMessageBus(address)": FunctionFragment;
    "setRemoteRfqContracts(uint64[],address[])": FunctionFragment;
    "setTreasuryAddr(address)": FunctionFragment;
    "srcDeposit((uint64,address,uint256,uint256,uint64,address,uint256,uint64,uint64,address,address,address,address),uint64)": FunctionFragment;
    "srcDepositNative((uint64,address,uint256,uint256,uint64,address,uint256,uint64,uint64,address,address,address,address),uint64)": FunctionFragment;
    "srcRelease((uint64,address,uint256,uint256,uint64,address,uint256,uint64,uint64,address,address,address,address),bytes)": FunctionFragment;
    "srcReleaseNative((uint64,address,uint256,uint256,uint64,address,uint256,uint64,uint64,address,address,address,address),bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAddr()": FunctionFragment;
    "unconsumedMsg(bytes32)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "addPauser", values: [string]): string;
  encodeFunctionData(functionFragment: "collectFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "dstTransfer",
    values: [RFQ.QuoteStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dstTransferNative",
    values: [RFQ.QuoteStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessage",
    values: [BytesLike, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransfer",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransferFallback",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransferRefund",
    values: [string, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRefund",
    values: [RFQ.QuoteStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRefundNative",
    values: [RFQ.QuoteStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feePercGlobal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercOverride",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMsgFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteHash",
    values: [RFQ.QuoteStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRfqFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "governors", values: [string]): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "isPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "messageBus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativeWrap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pausers", values: [string]): string;
  encodeFunctionData(functionFragment: "protocolFee", values: [string]): string;
  encodeFunctionData(functionFragment: "quotes", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "remoteRfqContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRefund",
    values: [RFQ.QuoteStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sameChainTransfer",
    values: [RFQ.QuoteStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sameChainTransferNative",
    values: [RFQ.QuoteStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePerc",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessageBus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRemoteRfqContracts",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "srcDeposit",
    values: [RFQ.QuoteStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "srcDepositNative",
    values: [RFQ.QuoteStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "srcRelease",
    values: [RFQ.QuoteStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "srcReleaseNative",
    values: [RFQ.QuoteStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unconsumedMsg",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dstTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dstTransferNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransferFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransferRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRefundNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercGlobal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMsgFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRfqFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messageBus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nativeWrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pausers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remoteRfqContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sameChainTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sameChainTransferNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeePerc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMessageBus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRemoteRfqContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "srcDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "srcDepositNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "srcRelease", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "srcReleaseNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unconsumedMsg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "DstTransferred(bytes32,address,address,uint256)": EventFragment;
    "FeeCollected(address,address,uint256)": EventFragment;
    "FeePercUpdated(uint64[],uint32[])": EventFragment;
    "GovernorAdded(address)": EventFragment;
    "GovernorRemoved(address)": EventFragment;
    "MessageBusUpdated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PauserAdded(address)": EventFragment;
    "PauserRemoved(address)": EventFragment;
    "RefundInitiated(bytes32)": EventFragment;
    "Refunded(bytes32,address,address,uint256)": EventFragment;
    "RfqContractsUpdated(uint64[],address[])": EventFragment;
    "SrcDeposited(bytes32,tuple)": EventFragment;
    "SrcReleased(bytes32,address,address,uint256)": EventFragment;
    "TreasuryAddrUpdated(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DstTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePercUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageBusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RfqContractsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SrcDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SrcReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryAddrUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type DstTransferredEvent = TypedEvent<
  [string, string, string, BigNumber],
  { quoteHash: string; receiver: string; dstToken: string; amount: BigNumber }
>;

export type DstTransferredEventFilter = TypedEventFilter<DstTransferredEvent>;

export type FeeCollectedEvent = TypedEvent<
  [string, string, BigNumber],
  { treasuryAddr: string; token: string; amount: BigNumber }
>;

export type FeeCollectedEventFilter = TypedEventFilter<FeeCollectedEvent>;

export type FeePercUpdatedEvent = TypedEvent<
  [BigNumber[], number[]],
  { chainIds: BigNumber[]; feePercs: number[] }
>;

export type FeePercUpdatedEventFilter = TypedEventFilter<FeePercUpdatedEvent>;

export type GovernorAddedEvent = TypedEvent<[string], { account: string }>;

export type GovernorAddedEventFilter = TypedEventFilter<GovernorAddedEvent>;

export type GovernorRemovedEvent = TypedEvent<[string], { account: string }>;

export type GovernorRemovedEventFilter = TypedEventFilter<GovernorRemovedEvent>;

export type MessageBusUpdatedEvent = TypedEvent<
  [string],
  { messageBus: string }
>;

export type MessageBusUpdatedEventFilter =
  TypedEventFilter<MessageBusUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PauserAddedEvent = TypedEvent<[string], { account: string }>;

export type PauserAddedEventFilter = TypedEventFilter<PauserAddedEvent>;

export type PauserRemovedEvent = TypedEvent<[string], { account: string }>;

export type PauserRemovedEventFilter = TypedEventFilter<PauserRemovedEvent>;

export type RefundInitiatedEvent = TypedEvent<[string], { quoteHash: string }>;

export type RefundInitiatedEventFilter = TypedEventFilter<RefundInitiatedEvent>;

export type RefundedEvent = TypedEvent<
  [string, string, string, BigNumber],
  { quoteHash: string; refundTo: string; srcToken: string; amount: BigNumber }
>;

export type RefundedEventFilter = TypedEventFilter<RefundedEvent>;

export type RfqContractsUpdatedEvent = TypedEvent<
  [BigNumber[], string[]],
  { chainIds: BigNumber[]; remoteRfqContracts: string[] }
>;

export type RfqContractsUpdatedEventFilter =
  TypedEventFilter<RfqContractsUpdatedEvent>;

export type SrcDepositedEvent = TypedEvent<
  [string, RFQ.QuoteStructOutput],
  { quoteHash: string; quote: RFQ.QuoteStructOutput }
>;

export type SrcDepositedEventFilter = TypedEventFilter<SrcDepositedEvent>;

export type SrcReleasedEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    quoteHash: string;
    liquidityProvider: string;
    srcToken: string;
    amount: BigNumber;
  }
>;

export type SrcReleasedEventFilter = TypedEventFilter<SrcReleasedEvent>;

export type TreasuryAddrUpdatedEvent = TypedEvent<
  [string],
  { treasuryAddr: string }
>;

export type TreasuryAddrUpdatedEventFilter =
  TypedEventFilter<TreasuryAddrUpdatedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface RFQ extends BaseContract {
  contractName: "RFQ";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RFQInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectFee(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dstTransfer(
      _quote: RFQ.QuoteStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dstTransferNative(
      _quote: RFQ.QuoteStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeMessage(bytes,uint64,bytes,address)"(
      _sender: BytesLike,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeMessage(address,uint64,bytes,address)"(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeRefund(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeRefundNative(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feePercGlobal(overrides?: CallOverrides): Promise<[number]>;

    feePercOverride(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMsgFee(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getQuoteHash(
      _quote: RFQ.QuoteStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRfqFee(
      _chainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    governors(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isPauser(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    messageBus(overrides?: CallOverrides): Promise<[string]>;

    nativeWrap(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    protocolFee(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    quotes(arg0: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    remoteRfqContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestRefund(
      _quote: RFQ.QuoteStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sameChainTransfer(
      _quote: RFQ.QuoteStruct,
      _releaseNative: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sameChainTransferNative(
      _quote: RFQ.QuoteStruct,
      _releaseNative: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeePerc(
      _chainIds: BigNumberish[],
      _feePercs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRemoteRfqContracts(
      _chainIds: BigNumberish[],
      _remoteRfqContracts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddr(
      _treasuryAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    srcDeposit(
      _quote: RFQ.QuoteStruct,
      _submissionDeadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    srcDepositNative(
      _quote: RFQ.QuoteStruct,
      _submissionDeadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    srcRelease(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    srcReleaseNative(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAddr(overrides?: CallOverrides): Promise<[string]>;

    unconsumedMsg(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addGovernor(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectFee(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dstTransfer(
    _quote: RFQ.QuoteStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dstTransferNative(
    _quote: RFQ.QuoteStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeMessage(bytes,uint64,bytes,address)"(
    _sender: BytesLike,
    _srcChainId: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeMessage(address,uint64,bytes,address)"(
    _sender: string,
    _srcChainId: BigNumberish,
    _message: BytesLike,
    arg3: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransfer(
    _sender: string,
    _token: string,
    _amount: BigNumberish,
    _srcChainId: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransferFallback(
    _sender: string,
    _token: string,
    _amount: BigNumberish,
    _srcChainId: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransferRefund(
    _token: string,
    _amount: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeRefund(
    _quote: RFQ.QuoteStruct,
    _execMsgCallData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeRefundNative(
    _quote: RFQ.QuoteStruct,
    _execMsgCallData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feePercGlobal(overrides?: CallOverrides): Promise<number>;

  feePercOverride(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getMsgFee(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getQuoteHash(
    _quote: RFQ.QuoteStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getRfqFee(
    _chainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

  messageBus(overrides?: CallOverrides): Promise<string>;

  nativeWrap(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  protocolFee(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  quotes(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

  remoteRfqContracts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  removeGovernor(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceGovernor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renouncePauser(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestRefund(
    _quote: RFQ.QuoteStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sameChainTransfer(
    _quote: RFQ.QuoteStruct,
    _releaseNative: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sameChainTransferNative(
    _quote: RFQ.QuoteStruct,
    _releaseNative: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeePerc(
    _chainIds: BigNumberish[],
    _feePercs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMessageBus(
    _messageBus: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRemoteRfqContracts(
    _chainIds: BigNumberish[],
    _remoteRfqContracts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddr(
    _treasuryAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  srcDeposit(
    _quote: RFQ.QuoteStruct,
    _submissionDeadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  srcDepositNative(
    _quote: RFQ.QuoteStruct,
    _submissionDeadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  srcRelease(
    _quote: RFQ.QuoteStruct,
    _execMsgCallData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  srcReleaseNative(
    _quote: RFQ.QuoteStruct,
    _execMsgCallData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAddr(overrides?: CallOverrides): Promise<string>;

  unconsumedMsg(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGovernor(_account: string, overrides?: CallOverrides): Promise<void>;

    addPauser(account: string, overrides?: CallOverrides): Promise<void>;

    collectFee(_token: string, overrides?: CallOverrides): Promise<void>;

    dstTransfer(
      _quote: RFQ.QuoteStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    dstTransferNative(
      _quote: RFQ.QuoteStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeMessage(bytes,uint64,bytes,address)"(
      _sender: BytesLike,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "executeMessage(address,uint64,bytes,address)"(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeRefund(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeRefundNative(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    feePercGlobal(overrides?: CallOverrides): Promise<number>;

    feePercOverride(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getMsgFee(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuoteHash(
      _quote: RFQ.QuoteStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getRfqFee(
      _chainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

    messageBus(overrides?: CallOverrides): Promise<string>;

    nativeWrap(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    protocolFee(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    quotes(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

    remoteRfqContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeGovernor(_account: string, overrides?: CallOverrides): Promise<void>;

    removePauser(account: string, overrides?: CallOverrides): Promise<void>;

    renounceGovernor(overrides?: CallOverrides): Promise<void>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;

    requestRefund(
      _quote: RFQ.QuoteStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    sameChainTransfer(
      _quote: RFQ.QuoteStruct,
      _releaseNative: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    sameChainTransferNative(
      _quote: RFQ.QuoteStruct,
      _releaseNative: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeePerc(
      _chainIds: BigNumberish[],
      _feePercs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMessageBus(
      _messageBus: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRemoteRfqContracts(
      _chainIds: BigNumberish[],
      _remoteRfqContracts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddr(
      _treasuryAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    srcDeposit(
      _quote: RFQ.QuoteStruct,
      _submissionDeadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    srcDepositNative(
      _quote: RFQ.QuoteStruct,
      _submissionDeadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    srcRelease(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    srcReleaseNative(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddr(overrides?: CallOverrides): Promise<string>;

    unconsumedMsg(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DstTransferred(bytes32,address,address,uint256)"(
      quoteHash?: null,
      receiver?: null,
      dstToken?: null,
      amount?: null
    ): DstTransferredEventFilter;
    DstTransferred(
      quoteHash?: null,
      receiver?: null,
      dstToken?: null,
      amount?: null
    ): DstTransferredEventFilter;

    "FeeCollected(address,address,uint256)"(
      treasuryAddr?: null,
      token?: null,
      amount?: null
    ): FeeCollectedEventFilter;
    FeeCollected(
      treasuryAddr?: null,
      token?: null,
      amount?: null
    ): FeeCollectedEventFilter;

    "FeePercUpdated(uint64[],uint32[])"(
      chainIds?: null,
      feePercs?: null
    ): FeePercUpdatedEventFilter;
    FeePercUpdated(chainIds?: null, feePercs?: null): FeePercUpdatedEventFilter;

    "GovernorAdded(address)"(account?: null): GovernorAddedEventFilter;
    GovernorAdded(account?: null): GovernorAddedEventFilter;

    "GovernorRemoved(address)"(account?: null): GovernorRemovedEventFilter;
    GovernorRemoved(account?: null): GovernorRemovedEventFilter;

    "MessageBusUpdated(address)"(
      messageBus?: null
    ): MessageBusUpdatedEventFilter;
    MessageBusUpdated(messageBus?: null): MessageBusUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PauserAdded(address)"(account?: null): PauserAddedEventFilter;
    PauserAdded(account?: null): PauserAddedEventFilter;

    "PauserRemoved(address)"(account?: null): PauserRemovedEventFilter;
    PauserRemoved(account?: null): PauserRemovedEventFilter;

    "RefundInitiated(bytes32)"(quoteHash?: null): RefundInitiatedEventFilter;
    RefundInitiated(quoteHash?: null): RefundInitiatedEventFilter;

    "Refunded(bytes32,address,address,uint256)"(
      quoteHash?: null,
      refundTo?: null,
      srcToken?: null,
      amount?: null
    ): RefundedEventFilter;
    Refunded(
      quoteHash?: null,
      refundTo?: null,
      srcToken?: null,
      amount?: null
    ): RefundedEventFilter;

    "RfqContractsUpdated(uint64[],address[])"(
      chainIds?: null,
      remoteRfqContracts?: null
    ): RfqContractsUpdatedEventFilter;
    RfqContractsUpdated(
      chainIds?: null,
      remoteRfqContracts?: null
    ): RfqContractsUpdatedEventFilter;

    "SrcDeposited(bytes32,tuple)"(
      quoteHash?: null,
      quote?: null
    ): SrcDepositedEventFilter;
    SrcDeposited(quoteHash?: null, quote?: null): SrcDepositedEventFilter;

    "SrcReleased(bytes32,address,address,uint256)"(
      quoteHash?: null,
      liquidityProvider?: null,
      srcToken?: null,
      amount?: null
    ): SrcReleasedEventFilter;
    SrcReleased(
      quoteHash?: null,
      liquidityProvider?: null,
      srcToken?: null,
      amount?: null
    ): SrcReleasedEventFilter;

    "TreasuryAddrUpdated(address)"(
      treasuryAddr?: null
    ): TreasuryAddrUpdatedEventFilter;
    TreasuryAddrUpdated(treasuryAddr?: null): TreasuryAddrUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectFee(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dstTransfer(
      _quote: RFQ.QuoteStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dstTransferNative(
      _quote: RFQ.QuoteStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeMessage(bytes,uint64,bytes,address)"(
      _sender: BytesLike,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeMessage(address,uint64,bytes,address)"(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeRefund(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeRefundNative(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feePercGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    feePercOverride(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMsgFee(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuoteHash(
      _quote: RFQ.QuoteStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRfqFee(
      _chainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPauser(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    messageBus(overrides?: CallOverrides): Promise<BigNumber>;

    nativeWrap(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    quotes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    remoteRfqContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestRefund(
      _quote: RFQ.QuoteStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sameChainTransfer(
      _quote: RFQ.QuoteStruct,
      _releaseNative: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sameChainTransferNative(
      _quote: RFQ.QuoteStruct,
      _releaseNative: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeePerc(
      _chainIds: BigNumberish[],
      _feePercs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRemoteRfqContracts(
      _chainIds: BigNumberish[],
      _remoteRfqContracts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddr(
      _treasuryAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    srcDeposit(
      _quote: RFQ.QuoteStruct,
      _submissionDeadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    srcDepositNative(
      _quote: RFQ.QuoteStruct,
      _submissionDeadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    srcRelease(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    srcReleaseNative(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAddr(overrides?: CallOverrides): Promise<BigNumber>;

    unconsumedMsg(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectFee(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dstTransfer(
      _quote: RFQ.QuoteStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dstTransferNative(
      _quote: RFQ.QuoteStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeMessage(bytes,uint64,bytes,address)"(
      _sender: BytesLike,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeMessage(address,uint64,bytes,address)"(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransfer(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransferFallback(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeRefund(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeRefundNative(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feePercGlobal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercOverride(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMsgFee(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuoteHash(
      _quote: RFQ.QuoteStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRfqFee(
      _chainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPauser(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageBus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativeWrap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remoteRfqContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestRefund(
      _quote: RFQ.QuoteStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sameChainTransfer(
      _quote: RFQ.QuoteStruct,
      _releaseNative: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sameChainTransferNative(
      _quote: RFQ.QuoteStruct,
      _releaseNative: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeePerc(
      _chainIds: BigNumberish[],
      _feePercs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRemoteRfqContracts(
      _chainIds: BigNumberish[],
      _remoteRfqContracts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddr(
      _treasuryAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    srcDeposit(
      _quote: RFQ.QuoteStruct,
      _submissionDeadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    srcDepositNative(
      _quote: RFQ.QuoteStruct,
      _submissionDeadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    srcRelease(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    srcReleaseNative(
      _quote: RFQ.QuoteStruct,
      _execMsgCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unconsumedMsg(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
