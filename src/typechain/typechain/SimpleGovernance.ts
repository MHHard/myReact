/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SimpleGovernanceInterface extends utils.Interface {
  contractName: "SimpleGovernance";
  functions: {
    "MAX_ACTIVE_PERIOD()": FunctionFragment;
    "MIN_ACTIVE_PERIOD()": FunctionFragment;
    "THRESHOLD_DECIMAL()": FunctionFragment;
    "countVotes(uint256,uint8)": FunctionFragment;
    "createParamChangeProposal(uint8,uint256)": FunctionFragment;
    "createProposal(address,bytes)": FunctionFragment;
    "createProxyUpdateProposal(address[],bool[])": FunctionFragment;
    "createTransferTokenProposal(address,address,uint256)": FunctionFragment;
    "createVoterUpdateProposal(address[],uint256[])": FunctionFragment;
    "executeProposal(uint256,uint8,address,bytes)": FunctionFragment;
    "getVote(uint256,address)": FunctionFragment;
    "getVoters()": FunctionFragment;
    "nextProposalId()": FunctionFragment;
    "params(uint8)": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "proposerProxies(address)": FunctionFragment;
    "voteProposal(uint256,bool)": FunctionFragment;
    "voterPowers(address)": FunctionFragment;
    "voters(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_ACTIVE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ACTIVE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "THRESHOLD_DECIMAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countVotes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createParamChangeProposal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createProxyUpdateProposal",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createTransferTokenProposal",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVoterUpdateProposal",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "getVoters", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "params",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposerProxies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "voteProposal",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "voterPowers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "voters",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_ACTIVE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ACTIVE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "THRESHOLD_DECIMAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "countVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createParamChangeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProxyUpdateProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTransferTokenProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVoterUpdateProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVoters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposerProxies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterPowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;

  events: {
    "Initiated(address[],uint256[],address[],uint256,uint256,uint256)": EventFragment;
    "ParamChangeProposalCreated(uint256,uint8,uint256)": EventFragment;
    "ProposalCreated(uint256,uint8,address,bytes,uint256,address)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "ProposalVoted(uint256,address,bool)": EventFragment;
    "ProxyUpdateProposalCreated(uint256,address[],bool[])": EventFragment;
    "TransferTokenProposalCreated(uint256,address,address,uint256)": EventFragment;
    "VoterUpdateProposalCreated(uint256,address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParamChangeProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyUpdateProposalCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferTokenProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterUpdateProposalCreated"): EventFragment;
}

export type InitiatedEvent = TypedEvent<
  [string[], BigNumber[], string[], BigNumber, BigNumber, BigNumber],
  {
    voters: string[];
    powers: BigNumber[];
    proxies: string[];
    activePeriod: BigNumber;
    quorumThreshold: BigNumber;
    fastPassThreshold: BigNumber;
  }
>;

export type InitiatedEventFilter = TypedEventFilter<InitiatedEvent>;

export type ParamChangeProposalCreatedEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  { proposalId: BigNumber; name: number; value: BigNumber }
>;

export type ParamChangeProposalCreatedEventFilter =
  TypedEventFilter<ParamChangeProposalCreatedEvent>;

export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, number, string, string, BigNumber, string],
  {
    proposalId: BigNumber;
    proposalType: number;
    target: string;
    data: string;
    deadline: BigNumber;
    proposer: string;
  }
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  { proposalId: BigNumber }
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export type ProposalVotedEvent = TypedEvent<
  [BigNumber, string, boolean],
  { proposalId: BigNumber; voter: string; vote: boolean }
>;

export type ProposalVotedEventFilter = TypedEventFilter<ProposalVotedEvent>;

export type ProxyUpdateProposalCreatedEvent = TypedEvent<
  [BigNumber, string[], boolean[]],
  { proposalId: BigNumber; addrs: string[]; ops: boolean[] }
>;

export type ProxyUpdateProposalCreatedEventFilter =
  TypedEventFilter<ProxyUpdateProposalCreatedEvent>;

export type TransferTokenProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { proposalId: BigNumber; receiver: string; token: string; amount: BigNumber }
>;

export type TransferTokenProposalCreatedEventFilter =
  TypedEventFilter<TransferTokenProposalCreatedEvent>;

export type VoterUpdateProposalCreatedEvent = TypedEvent<
  [BigNumber, string[], BigNumber[]],
  { proposalId: BigNumber; voters: string[]; powers: BigNumber[] }
>;

export type VoterUpdateProposalCreatedEventFilter =
  TypedEventFilter<VoterUpdateProposalCreatedEvent>;

export interface SimpleGovernance extends BaseContract {
  contractName: "SimpleGovernance";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleGovernanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_ACTIVE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_ACTIVE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    THRESHOLD_DECIMAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    countVotes(
      _proposalId: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, boolean]>;

    createParamChangeProposal(
      _name: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createProposal(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createProposal(address,address,bytes,uint8)"(
      _proposer: string,
      _target: string,
      _data: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createProxyUpdateProposal(
      _addrs: string[],
      _ops: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTransferTokenProposal(
      _receiver: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createVoterUpdateProposal(
      _voters: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeProposal(
      _proposalId: BigNumberish,
      _type: BigNumberish,
      _target: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getVote(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getVoters(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    nextProposalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    params(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { dataHash: string; deadline: BigNumber }>;

    proposerProxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    voteProposal(
      _proposalId: BigNumberish,
      _vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voterPowers(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    voters(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_ACTIVE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_ACTIVE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  THRESHOLD_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

  countVotes(
    _proposalId: BigNumberish,
    _type: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, boolean]>;

  createParamChangeProposal(
    _name: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createProposal(address,bytes)"(
    _target: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createProposal(address,address,bytes,uint8)"(
    _proposer: string,
    _target: string,
    _data: BytesLike,
    _type: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createProxyUpdateProposal(
    _addrs: string[],
    _ops: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTransferTokenProposal(
    _receiver: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createVoterUpdateProposal(
    _voters: string[],
    _powers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeProposal(
    _proposalId: BigNumberish,
    _type: BigNumberish,
    _target: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getVote(
    _proposalId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getVoters(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

  nextProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  params(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { dataHash: string; deadline: BigNumber }>;

  proposerProxies(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  voteProposal(
    _proposalId: BigNumberish,
    _vote: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voterPowers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  voters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_ACTIVE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_ACTIVE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    THRESHOLD_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

    countVotes(
      _proposalId: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, boolean]>;

    createParamChangeProposal(
      _name: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createProposal(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createProposal(address,address,bytes,uint8)"(
      _proposer: string,
      _target: string,
      _data: BytesLike,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createProxyUpdateProposal(
      _addrs: string[],
      _ops: boolean[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTransferTokenProposal(
      _receiver: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createVoterUpdateProposal(
      _voters: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeProposal(
      _proposalId: BigNumberish,
      _type: BigNumberish,
      _target: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getVote(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getVoters(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    nextProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    params(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { dataHash: string; deadline: BigNumber }>;

    proposerProxies(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    voteProposal(
      _proposalId: BigNumberish,
      _vote: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    voterPowers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    voters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initiated(address[],uint256[],address[],uint256,uint256,uint256)"(
      voters?: null,
      powers?: null,
      proxies?: null,
      activePeriod?: null,
      quorumThreshold?: null,
      fastPassThreshold?: null
    ): InitiatedEventFilter;
    Initiated(
      voters?: null,
      powers?: null,
      proxies?: null,
      activePeriod?: null,
      quorumThreshold?: null,
      fastPassThreshold?: null
    ): InitiatedEventFilter;

    "ParamChangeProposalCreated(uint256,uint8,uint256)"(
      proposalId?: null,
      name?: null,
      value?: null
    ): ParamChangeProposalCreatedEventFilter;
    ParamChangeProposalCreated(
      proposalId?: null,
      name?: null,
      value?: null
    ): ParamChangeProposalCreatedEventFilter;

    "ProposalCreated(uint256,uint8,address,bytes,uint256,address)"(
      proposalId?: null,
      proposalType?: null,
      target?: null,
      data?: null,
      deadline?: null,
      proposer?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      proposalId?: null,
      proposalType?: null,
      target?: null,
      data?: null,
      deadline?: null,
      proposer?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(uint256)"(proposalId?: null): ProposalExecutedEventFilter;
    ProposalExecuted(proposalId?: null): ProposalExecutedEventFilter;

    "ProposalVoted(uint256,address,bool)"(
      proposalId?: null,
      voter?: null,
      vote?: null
    ): ProposalVotedEventFilter;
    ProposalVoted(
      proposalId?: null,
      voter?: null,
      vote?: null
    ): ProposalVotedEventFilter;

    "ProxyUpdateProposalCreated(uint256,address[],bool[])"(
      proposalId?: null,
      addrs?: null,
      ops?: null
    ): ProxyUpdateProposalCreatedEventFilter;
    ProxyUpdateProposalCreated(
      proposalId?: null,
      addrs?: null,
      ops?: null
    ): ProxyUpdateProposalCreatedEventFilter;

    "TransferTokenProposalCreated(uint256,address,address,uint256)"(
      proposalId?: null,
      receiver?: null,
      token?: null,
      amount?: null
    ): TransferTokenProposalCreatedEventFilter;
    TransferTokenProposalCreated(
      proposalId?: null,
      receiver?: null,
      token?: null,
      amount?: null
    ): TransferTokenProposalCreatedEventFilter;

    "VoterUpdateProposalCreated(uint256,address[],uint256[])"(
      proposalId?: null,
      voters?: null,
      powers?: null
    ): VoterUpdateProposalCreatedEventFilter;
    VoterUpdateProposalCreated(
      proposalId?: null,
      voters?: null,
      powers?: null
    ): VoterUpdateProposalCreatedEventFilter;
  };

  estimateGas: {
    MAX_ACTIVE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_ACTIVE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    THRESHOLD_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

    countVotes(
      _proposalId: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createParamChangeProposal(
      _name: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createProposal(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createProposal(address,address,bytes,uint8)"(
      _proposer: string,
      _target: string,
      _data: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createProxyUpdateProposal(
      _addrs: string[],
      _ops: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTransferTokenProposal(
      _receiver: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createVoterUpdateProposal(
      _voters: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeProposal(
      _proposalId: BigNumberish,
      _type: BigNumberish,
      _target: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getVote(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoters(overrides?: CallOverrides): Promise<BigNumber>;

    nextProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    params(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposerProxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteProposal(
      _proposalId: BigNumberish,
      _vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voterPowers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    voters(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_ACTIVE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_ACTIVE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    THRESHOLD_DECIMAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countVotes(
      _proposalId: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createParamChangeProposal(
      _name: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createProposal(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createProposal(address,address,bytes,uint8)"(
      _proposer: string,
      _target: string,
      _data: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createProxyUpdateProposal(
      _addrs: string[],
      _ops: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTransferTokenProposal(
      _receiver: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createVoterUpdateProposal(
      _voters: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeProposal(
      _proposalId: BigNumberish,
      _type: BigNumberish,
      _target: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getVote(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextProposalId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    params(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposerProxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteProposal(
      _proposalId: BigNumberish,
      _vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voterPowers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
