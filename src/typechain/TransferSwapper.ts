/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Types {
  export type TransferDescriptionStruct = {
    receiver: string;
    dstChainId: BigNumberish;
    dstTransferSwapper: string;
    nonce: BigNumberish;
    bridgeProvider: string;
    bridgeParams: BytesLike;
    nativeIn: boolean;
    nativeOut: boolean;
    fee: BigNumberish;
    feeDeadline: BigNumberish;
    feeSig: BytesLike;
    amountIn: BigNumberish;
    tokenIn: string;
    bridgeTokenIn: string;
    dstTokenOut: string;
    allowPartialFill: boolean;
    forward: BytesLike;
  };

  export type TransferDescriptionStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    string,
    boolean,
    string
  ] & {
    receiver: string;
    dstChainId: BigNumber;
    dstTransferSwapper: string;
    nonce: BigNumber;
    bridgeProvider: string;
    bridgeParams: string;
    nativeIn: boolean;
    nativeOut: boolean;
    fee: BigNumber;
    feeDeadline: BigNumber;
    feeSig: string;
    amountIn: BigNumber;
    tokenIn: string;
    bridgeTokenIn: string;
    dstTokenOut: string;
    allowPartialFill: boolean;
    forward: string;
  };
}

export declare namespace ICodec {
  export type SwapDescriptionStruct = { dex: string; data: BytesLike };

  export type SwapDescriptionStructOutput = [string, string] & {
    dex: string;
    data: string;
  };
}

export interface TransferSwapperInterface extends utils.Interface {
  contractName: "TransferSwapper";
  functions: {
    "CBRIDGE_PROVIDER_HASH()": FunctionFragment;
    "bridges(bytes32)": FunctionFragment;
    "codecs(uint256)": FunctionFragment;
    "collectFee(address[],address)": FunctionFragment;
    "dexRegistry(address,bytes4)": FunctionFragment;
    "executeMessage(address,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": FunctionFragment;
    "executeMessageWithTransferRefund(address,uint256,bytes,address)": FunctionFragment;
    "executeMessageWithTransferRefundFromAdapter(address,uint256,bytes,address)": FunctionFragment;
    "externalSwap(address)": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "messageBus()": FunctionFragment;
    "nativeWrap()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "selector2codec(bytes4)": FunctionFragment;
    "setCodec(string,address)": FunctionFragment;
    "setExternalSwap(address,bool)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setMessageBus(address)": FunctionFragment;
    "setNativeWrap(address)": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "setSupportedBridges(string[],address[])": FunctionFragment;
    "setSupportedDex(address,bytes4,bool)": FunctionFragment;
    "signer()": FunctionFragment;
    "testMode()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferWithSwap((address,uint64,address,uint64,string,bytes,bool,bool,uint256,uint256,bytes,uint256,address,address,address,bool,bytes),(address,bytes)[],(address,bytes)[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CBRIDGE_PROVIDER_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bridges", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "codecs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "dexRegistry",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessage",
    values: [string, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransfer",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransferFallback",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransferRefund",
    values: [string, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransferRefundFromAdapter",
    values: [string, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "externalSwap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageBus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativeWrap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selector2codec",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCodec",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExternalSwap",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessageBus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNativeWrap",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSupportedBridges",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedDex",
    values: [string, BytesLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(functionFragment: "testMode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithSwap",
    values: [
      Types.TransferDescriptionStruct,
      ICodec.SwapDescriptionStruct[],
      ICodec.SwapDescriptionStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "CBRIDGE_PROVIDER_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "codecs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dexRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransferFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransferRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransferRefundFromAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messageBus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nativeWrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selector2codec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCodec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExternalSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMessageBus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNativeWrap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedBridges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedDex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testMode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithSwap",
    data: BytesLike
  ): Result;

  events: {
    "CodecUpdated(bytes4,address)": EventFragment;
    "DirectSwap(bytes32,uint256,address,uint256,address)": EventFragment;
    "ExternalSwapUpdated(address,bool)": EventFragment;
    "FeeCollectorUpdated(address,address)": EventFragment;
    "MessageBusUpdated(address)": EventFragment;
    "NativeWrapUpdated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestDone(bytes32,uint256,uint256,address,uint256,uint8,bytes)": EventFragment;
    "RequestSent(bytes32,bytes,uint64,uint256,address,address,address,address,uint256,string)": EventFragment;
    "SignerUpdated(address,address)": EventFragment;
    "SupportedBridgesUpdated(string[],address[])": EventFragment;
    "SupportedDexUpdated(address,bytes4,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CodecUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DirectSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExternalSwapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollectorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageBusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeWrapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestDone"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedBridgesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedDexUpdated"): EventFragment;
}

export type CodecUpdatedEvent = TypedEvent<
  [string, string],
  { selector: string; codec: string }
>;

export type CodecUpdatedEventFilter = TypedEventFilter<CodecUpdatedEvent>;

export type DirectSwapEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  {
    id: string;
    amountIn: BigNumber;
    tokenIn: string;
    amountOut: BigNumber;
    tokenOut: string;
  }
>;

export type DirectSwapEventFilter = TypedEventFilter<DirectSwapEvent>;

export type ExternalSwapUpdatedEvent = TypedEvent<
  [string, boolean],
  { dex: string; enabled: boolean }
>;

export type ExternalSwapUpdatedEventFilter =
  TypedEventFilter<ExternalSwapUpdatedEvent>;

export type FeeCollectorUpdatedEvent = TypedEvent<
  [string, string],
  { from: string; to: string }
>;

export type FeeCollectorUpdatedEventFilter =
  TypedEventFilter<FeeCollectorUpdatedEvent>;

export type MessageBusUpdatedEvent = TypedEvent<
  [string],
  { messageBus: string }
>;

export type MessageBusUpdatedEventFilter =
  TypedEventFilter<MessageBusUpdatedEvent>;

export type NativeWrapUpdatedEvent = TypedEvent<
  [string],
  { nativeWrap: string }
>;

export type NativeWrapUpdatedEventFilter =
  TypedEventFilter<NativeWrapUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RequestDoneEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber, number, string],
  {
    id: string;
    dstAmount: BigNumber;
    refundAmount: BigNumber;
    refundToken: string;
    feeCollected: BigNumber;
    status: number;
    forwardResp: string;
  }
>;

export type RequestDoneEventFilter = TypedEventFilter<RequestDoneEvent>;

export type RequestSentEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    string
  ],
  {
    id: string;
    bridgeResp: string;
    dstChainId: BigNumber;
    srcAmount: BigNumber;
    srcToken: string;
    dstToken: string;
    bridgeOutReceiver: string;
    bridgeToken: string;
    bridgeAmount: BigNumber;
    bridgeProvider: string;
  }
>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export type SignerUpdatedEvent = TypedEvent<
  [string, string],
  { from: string; to: string }
>;

export type SignerUpdatedEventFilter = TypedEventFilter<SignerUpdatedEvent>;

export type SupportedBridgesUpdatedEvent = TypedEvent<
  [string[], string[]],
  { _bridgeProviders: string[]; _bridgeAdapters: string[] }
>;

export type SupportedBridgesUpdatedEventFilter =
  TypedEventFilter<SupportedBridgesUpdatedEvent>;

export type SupportedDexUpdatedEvent = TypedEvent<
  [string, string, boolean],
  { dex: string; selector: string; enabled: boolean }
>;

export type SupportedDexUpdatedEventFilter =
  TypedEventFilter<SupportedDexUpdatedEvent>;

export interface TransferSwapper extends BaseContract {
  contractName: "TransferSwapper";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TransferSwapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CBRIDGE_PROVIDER_HASH(overrides?: CallOverrides): Promise<[string]>;

    bridges(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    codecs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    collectFee(
      _tokens: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dexRegistry(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    executeMessage(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransfer(
      arg0: string,
      _token: string,
      _amount: BigNumberish,
      arg3: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransferFallback(
      arg0: string,
      _token: string,
      _amount: BigNumberish,
      arg3: BigNumberish,
      _message: BytesLike,
      arg5: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransferRefundFromAdapter(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    externalSwap(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    messageBus(overrides?: CallOverrides): Promise<[string]>;

    nativeWrap(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    selector2codec(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setCodec(
      _funcSig: string,
      _codec: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExternalSwap(
      _dex: string,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNativeWrap(
      _nativeWrap: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupportedBridges(
      _bridgeProviders: string[],
      _bridgeAdapters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupportedDex(
      _dex: string,
      _selector: BytesLike,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    testMode(overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferWithSwap(
      _desc: Types.TransferDescriptionStruct,
      _srcSwaps: ICodec.SwapDescriptionStruct[],
      _dstSwaps: ICodec.SwapDescriptionStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CBRIDGE_PROVIDER_HASH(overrides?: CallOverrides): Promise<string>;

  bridges(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  codecs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  collectFee(
    _tokens: string[],
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dexRegistry(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  executeMessage(
    _sender: string,
    _srcChainId: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransfer(
    arg0: string,
    _token: string,
    _amount: BigNumberish,
    arg3: BigNumberish,
    _message: BytesLike,
    _executor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransferFallback(
    arg0: string,
    _token: string,
    _amount: BigNumberish,
    arg3: BigNumberish,
    _message: BytesLike,
    arg5: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransferRefund(
    _token: string,
    _amount: BigNumberish,
    _message: BytesLike,
    arg3: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransferRefundFromAdapter(
    _token: string,
    _amount: BigNumberish,
    _message: BytesLike,
    arg3: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  externalSwap(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  messageBus(overrides?: CallOverrides): Promise<string>;

  nativeWrap(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  selector2codec(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  setCodec(
    _funcSig: string,
    _codec: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExternalSwap(
    _dex: string,
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _feeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMessageBus(
    _messageBus: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNativeWrap(
    _nativeWrap: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupportedBridges(
    _bridgeProviders: string[],
    _bridgeAdapters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupportedDex(
    _dex: string,
    _selector: BytesLike,
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testMode(overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferWithSwap(
    _desc: Types.TransferDescriptionStruct,
    _srcSwaps: ICodec.SwapDescriptionStruct[],
    _dstSwaps: ICodec.SwapDescriptionStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CBRIDGE_PROVIDER_HASH(overrides?: CallOverrides): Promise<string>;

    bridges(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    codecs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    collectFee(
      _tokens: string[],
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dexRegistry(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeMessage(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeMessageWithTransfer(
      arg0: string,
      _token: string,
      _amount: BigNumberish,
      arg3: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeMessageWithTransferFallback(
      arg0: string,
      _token: string,
      _amount: BigNumberish,
      arg3: BigNumberish,
      _message: BytesLike,
      arg5: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<number>;

    executeMessageWithTransferRefundFromAdapter(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<number>;

    externalSwap(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    messageBus(overrides?: CallOverrides): Promise<string>;

    nativeWrap(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    selector2codec(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    setCodec(
      _funcSig: string,
      _codec: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setExternalSwap(
      _dex: string,
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMessageBus(
      _messageBus: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNativeWrap(
      _nativeWrap: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(_signer: string, overrides?: CallOverrides): Promise<void>;

    setSupportedBridges(
      _bridgeProviders: string[],
      _bridgeAdapters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportedDex(
      _dex: string,
      _selector: BytesLike,
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    signer(overrides?: CallOverrides): Promise<string>;

    testMode(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWithSwap(
      _desc: Types.TransferDescriptionStruct,
      _srcSwaps: ICodec.SwapDescriptionStruct[],
      _dstSwaps: ICodec.SwapDescriptionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CodecUpdated(bytes4,address)"(
      selector?: null,
      codec?: null
    ): CodecUpdatedEventFilter;
    CodecUpdated(selector?: null, codec?: null): CodecUpdatedEventFilter;

    "DirectSwap(bytes32,uint256,address,uint256,address)"(
      id?: null,
      amountIn?: null,
      tokenIn?: null,
      amountOut?: null,
      tokenOut?: null
    ): DirectSwapEventFilter;
    DirectSwap(
      id?: null,
      amountIn?: null,
      tokenIn?: null,
      amountOut?: null,
      tokenOut?: null
    ): DirectSwapEventFilter;

    "ExternalSwapUpdated(address,bool)"(
      dex?: null,
      enabled?: null
    ): ExternalSwapUpdatedEventFilter;
    ExternalSwapUpdated(
      dex?: null,
      enabled?: null
    ): ExternalSwapUpdatedEventFilter;

    "FeeCollectorUpdated(address,address)"(
      from?: null,
      to?: null
    ): FeeCollectorUpdatedEventFilter;
    FeeCollectorUpdated(from?: null, to?: null): FeeCollectorUpdatedEventFilter;

    "MessageBusUpdated(address)"(
      messageBus?: null
    ): MessageBusUpdatedEventFilter;
    MessageBusUpdated(messageBus?: null): MessageBusUpdatedEventFilter;

    "NativeWrapUpdated(address)"(
      nativeWrap?: null
    ): NativeWrapUpdatedEventFilter;
    NativeWrapUpdated(nativeWrap?: null): NativeWrapUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RequestDone(bytes32,uint256,uint256,address,uint256,uint8,bytes)"(
      id?: null,
      dstAmount?: null,
      refundAmount?: null,
      refundToken?: null,
      feeCollected?: null,
      status?: null,
      forwardResp?: null
    ): RequestDoneEventFilter;
    RequestDone(
      id?: null,
      dstAmount?: null,
      refundAmount?: null,
      refundToken?: null,
      feeCollected?: null,
      status?: null,
      forwardResp?: null
    ): RequestDoneEventFilter;

    "RequestSent(bytes32,bytes,uint64,uint256,address,address,address,address,uint256,string)"(
      id?: null,
      bridgeResp?: null,
      dstChainId?: null,
      srcAmount?: null,
      srcToken?: null,
      dstToken?: null,
      bridgeOutReceiver?: null,
      bridgeToken?: null,
      bridgeAmount?: null,
      bridgeProvider?: null
    ): RequestSentEventFilter;
    RequestSent(
      id?: null,
      bridgeResp?: null,
      dstChainId?: null,
      srcAmount?: null,
      srcToken?: null,
      dstToken?: null,
      bridgeOutReceiver?: null,
      bridgeToken?: null,
      bridgeAmount?: null,
      bridgeProvider?: null
    ): RequestSentEventFilter;

    "SignerUpdated(address,address)"(
      from?: null,
      to?: null
    ): SignerUpdatedEventFilter;
    SignerUpdated(from?: null, to?: null): SignerUpdatedEventFilter;

    "SupportedBridgesUpdated(string[],address[])"(
      _bridgeProviders?: null,
      _bridgeAdapters?: null
    ): SupportedBridgesUpdatedEventFilter;
    SupportedBridgesUpdated(
      _bridgeProviders?: null,
      _bridgeAdapters?: null
    ): SupportedBridgesUpdatedEventFilter;

    "SupportedDexUpdated(address,bytes4,bool)"(
      dex?: null,
      selector?: null,
      enabled?: null
    ): SupportedDexUpdatedEventFilter;
    SupportedDexUpdated(
      dex?: null,
      selector?: null,
      enabled?: null
    ): SupportedDexUpdatedEventFilter;
  };

  estimateGas: {
    CBRIDGE_PROVIDER_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    bridges(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    codecs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    collectFee(
      _tokens: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dexRegistry(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeMessage(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransfer(
      arg0: string,
      _token: string,
      _amount: BigNumberish,
      arg3: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransferFallback(
      arg0: string,
      _token: string,
      _amount: BigNumberish,
      arg3: BigNumberish,
      _message: BytesLike,
      arg5: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransferRefundFromAdapter(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    externalSwap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    messageBus(overrides?: CallOverrides): Promise<BigNumber>;

    nativeWrap(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    selector2codec(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCodec(
      _funcSig: string,
      _codec: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExternalSwap(
      _dex: string,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNativeWrap(
      _nativeWrap: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupportedBridges(
      _bridgeProviders: string[],
      _bridgeAdapters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupportedDex(
      _dex: string,
      _selector: BytesLike,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    testMode(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferWithSwap(
      _desc: Types.TransferDescriptionStruct,
      _srcSwaps: ICodec.SwapDescriptionStruct[],
      _dstSwaps: ICodec.SwapDescriptionStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CBRIDGE_PROVIDER_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridges(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    codecs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectFee(
      _tokens: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dexRegistry(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeMessage(
      _sender: string,
      _srcChainId: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransfer(
      arg0: string,
      _token: string,
      _amount: BigNumberish,
      arg3: BigNumberish,
      _message: BytesLike,
      _executor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransferFallback(
      arg0: string,
      _token: string,
      _amount: BigNumberish,
      arg3: BigNumberish,
      _message: BytesLike,
      arg5: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransferRefund(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransferRefundFromAdapter(
      _token: string,
      _amount: BigNumberish,
      _message: BytesLike,
      arg3: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    externalSwap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageBus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativeWrap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    selector2codec(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCodec(
      _funcSig: string,
      _codec: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExternalSwap(
      _dex: string,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMessageBus(
      _messageBus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNativeWrap(
      _nativeWrap: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupportedBridges(
      _bridgeProviders: string[],
      _bridgeAdapters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupportedDex(
      _dex: string,
      _selector: BytesLike,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferWithSwap(
      _desc: Types.TransferDescriptionStruct,
      _srcSwaps: ICodec.SwapDescriptionStruct[],
      _dstSwaps: ICodec.SwapDescriptionStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
