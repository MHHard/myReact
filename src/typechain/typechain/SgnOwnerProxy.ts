/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SgnOwnerProxyInterface extends utils.Interface {
  contractName: "SgnOwnerProxy";
  functions: {
    "gov()": FunctionFragment;
    "initGov(address)": FunctionFragment;
    "proposeDrainToken(address,address,uint256)": FunctionFragment;
    "proposeSetGovContract(address,address)": FunctionFragment;
    "proposeSetMaxSlashFactor(address,uint256)": FunctionFragment;
    "proposeSetRewardContract(address,address)": FunctionFragment;
    "proposeSetWhitelistEnable(address,bool)": FunctionFragment;
    "proposeUpdateWhitelisted(address,uint8,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "initGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proposeDrainToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetGovContract",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetMaxSlashFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetRewardContract",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetWhitelistEnable",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpdateWhitelisted",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeDrainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetGovContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetMaxSlashFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetRewardContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetWhitelistEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpdateWhitelisted",
    data: BytesLike
  ): Result;

  events: {
    "DrainTokenProposalCreated(uint256,address,address,uint256)": EventFragment;
    "SetGovContractProposalCreated(uint256,address,address)": EventFragment;
    "SetMaxSlashFactorProposalCreated(uint256,address,uint256)": EventFragment;
    "SetRewardContractProposalCreated(uint256,address,address)": EventFragment;
    "SetWhitelistEnableProposalCreated(uint256,address,bool)": EventFragment;
    "UpdateWhitelistedProposalCreated(uint256,address,uint8,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DrainTokenProposalCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetGovContractProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetMaxSlashFactorProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetRewardContractProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetWhitelistEnableProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateWhitelistedProposalCreated"
  ): EventFragment;
}

export type DrainTokenProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { proposalId: BigNumber; target: string; token: string; amount: BigNumber }
>;

export type DrainTokenProposalCreatedEventFilter =
  TypedEventFilter<DrainTokenProposalCreatedEvent>;

export type SetGovContractProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  { proposalId: BigNumber; target: string; addr: string }
>;

export type SetGovContractProposalCreatedEventFilter =
  TypedEventFilter<SetGovContractProposalCreatedEvent>;

export type SetMaxSlashFactorProposalCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { proposalId: BigNumber; target: string; maxSlashFactor: BigNumber }
>;

export type SetMaxSlashFactorProposalCreatedEventFilter =
  TypedEventFilter<SetMaxSlashFactorProposalCreatedEvent>;

export type SetRewardContractProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  { proposalId: BigNumber; target: string; addr: string }
>;

export type SetRewardContractProposalCreatedEventFilter =
  TypedEventFilter<SetRewardContractProposalCreatedEvent>;

export type SetWhitelistEnableProposalCreatedEvent = TypedEvent<
  [BigNumber, string, boolean],
  { proposalId: BigNumber; target: string; enabled: boolean }
>;

export type SetWhitelistEnableProposalCreatedEventFilter =
  TypedEventFilter<SetWhitelistEnableProposalCreatedEvent>;

export type UpdateWhitelistedProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, string],
  { proposalId: BigNumber; target: string; action: number; account: string }
>;

export type UpdateWhitelistedProposalCreatedEventFilter =
  TypedEventFilter<UpdateWhitelistedProposalCreatedEvent>;

export interface SgnOwnerProxy extends BaseContract {
  contractName: "SgnOwnerProxy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SgnOwnerProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gov(overrides?: CallOverrides): Promise<[string]>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeDrainToken(
      _target: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetGovContract(
      _target: string,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetMaxSlashFactor(
      _target: string,
      _maxSlashFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetRewardContract(
      _target: string,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetWhitelistEnable(
      _target: string,
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpdateWhitelisted(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  gov(overrides?: CallOverrides): Promise<string>;

  initGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeDrainToken(
    _target: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetGovContract(
    _target: string,
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetMaxSlashFactor(
    _target: string,
    _maxSlashFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetRewardContract(
    _target: string,
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetWhitelistEnable(
    _target: string,
    _enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpdateWhitelisted(
    _target: string,
    _action: BigNumberish,
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    gov(overrides?: CallOverrides): Promise<string>;

    initGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    proposeDrainToken(
      _target: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetGovContract(
      _target: string,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetMaxSlashFactor(
      _target: string,
      _maxSlashFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetRewardContract(
      _target: string,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetWhitelistEnable(
      _target: string,
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpdateWhitelisted(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DrainTokenProposalCreated(uint256,address,address,uint256)"(
      proposalId?: null,
      target?: null,
      token?: null,
      amount?: null
    ): DrainTokenProposalCreatedEventFilter;
    DrainTokenProposalCreated(
      proposalId?: null,
      target?: null,
      token?: null,
      amount?: null
    ): DrainTokenProposalCreatedEventFilter;

    "SetGovContractProposalCreated(uint256,address,address)"(
      proposalId?: null,
      target?: null,
      addr?: null
    ): SetGovContractProposalCreatedEventFilter;
    SetGovContractProposalCreated(
      proposalId?: null,
      target?: null,
      addr?: null
    ): SetGovContractProposalCreatedEventFilter;

    "SetMaxSlashFactorProposalCreated(uint256,address,uint256)"(
      proposalId?: null,
      target?: null,
      maxSlashFactor?: null
    ): SetMaxSlashFactorProposalCreatedEventFilter;
    SetMaxSlashFactorProposalCreated(
      proposalId?: null,
      target?: null,
      maxSlashFactor?: null
    ): SetMaxSlashFactorProposalCreatedEventFilter;

    "SetRewardContractProposalCreated(uint256,address,address)"(
      proposalId?: null,
      target?: null,
      addr?: null
    ): SetRewardContractProposalCreatedEventFilter;
    SetRewardContractProposalCreated(
      proposalId?: null,
      target?: null,
      addr?: null
    ): SetRewardContractProposalCreatedEventFilter;

    "SetWhitelistEnableProposalCreated(uint256,address,bool)"(
      proposalId?: null,
      target?: null,
      enabled?: null
    ): SetWhitelistEnableProposalCreatedEventFilter;
    SetWhitelistEnableProposalCreated(
      proposalId?: null,
      target?: null,
      enabled?: null
    ): SetWhitelistEnableProposalCreatedEventFilter;

    "UpdateWhitelistedProposalCreated(uint256,address,uint8,address)"(
      proposalId?: null,
      target?: null,
      action?: null,
      account?: null
    ): UpdateWhitelistedProposalCreatedEventFilter;
    UpdateWhitelistedProposalCreated(
      proposalId?: null,
      target?: null,
      action?: null,
      account?: null
    ): UpdateWhitelistedProposalCreatedEventFilter;
  };

  estimateGas: {
    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeDrainToken(
      _target: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetGovContract(
      _target: string,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetMaxSlashFactor(
      _target: string,
      _maxSlashFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetRewardContract(
      _target: string,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetWhitelistEnable(
      _target: string,
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpdateWhitelisted(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeDrainToken(
      _target: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetGovContract(
      _target: string,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetMaxSlashFactor(
      _target: string,
      _maxSlashFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetRewardContract(
      _target: string,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetWhitelistEnable(
      _target: string,
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpdateWhitelisted(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
