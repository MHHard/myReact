/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  IntermediaryOriginalToken,
  IntermediaryOriginalTokenInterface,
} from "../IntermediaryOriginalToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "address[]",
        name: "bridges_",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "canonical_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "bridge",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "enable",
        type: "bool",
      },
    ],
    name: "BridgeUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "bridges",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "canonical",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridge",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_enable",
        type: "bool",
      },
    ],
    name: "updateBridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620018b8380380620018b88339810160408190526200003491620002fd565b8351849084906200004d9060039060208501906200015c565b508051620000639060049060208401906200015c565b505050620000806200007a6200010660201b60201c565b6200010a565b60005b8251811015620000ef57600160066000858481518110620000a857620000a862000416565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000e6816200042c565b91505062000083565b506001600160a01b03166080525062000493915050565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200016a9062000456565b90600052602060002090601f0160209004810192826200018e5760008555620001d9565b82601f10620001a957805160ff1916838001178555620001d9565b82800160010185558215620001d9579182015b82811115620001d9578251825591602001919060010190620001bc565b50620001e7929150620001eb565b5090565b5b80821115620001e75760008155600101620001ec565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000243576200024362000202565b604052919050565b600082601f8301126200025d57600080fd5b81516001600160401b0381111562000279576200027962000202565b60206200028f601f8301601f1916820162000218565b8281528582848701011115620002a457600080fd5b60005b83811015620002c4578581018301518282018401528201620002a7565b83811115620002d65760008385840101525b5095945050505050565b80516001600160a01b0381168114620002f857600080fd5b919050565b600080600080608085870312156200031457600080fd5b84516001600160401b03808211156200032c57600080fd5b6200033a888389016200024b565b95506020915081870151818111156200035257600080fd5b6200036089828a016200024b565b9550506040870151818111156200037657600080fd5b8701601f810189136200038857600080fd5b8051828111156200039d576200039d62000202565b8060051b9250620003b084840162000218565b818152928201840192848101908b851115620003cb57600080fd5b928501925b84841015620003f457620003e484620002e0565b82529285019290850190620003d0565b8097505050505050506200040b60608601620002e0565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200044f57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806200046b57607f821691505b602082108114156200048d57634e487b7160e01b600052602260045260246000fd5b50919050565b6080516113f4620004c4600039600081816101a6015281816103e201528181610423015261073501526113f46000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c806377a1c531116100b2578063a457c2d711610081578063ced67f0c11610066578063ced67f0c1461029a578063dd62ed3e146102bd578063f2fde38b146102f657600080fd5b8063a457c2d714610274578063a9059cbb1461028757600080fd5b806377a1c53114610240578063893d20e8146102535780638da5cb5b1461025b57806395d89b411461026c57600080fd5b806326afaadd1161010957806339509351116100ee57806339509351146101fa57806370a082311461020d578063715018a61461023657600080fd5b806326afaadd146101a1578063313ce567146101e057600080fd5b806306fdde031461013b578063095ea7b31461015957806318160ddd1461017c57806323b872dd1461018e575b600080fd5b610143610309565b604051610150919061119a565b60405180910390f35b61016c6101673660046111e9565b61039b565b6040519015158152602001610150565b6002545b604051908152602001610150565b61016c61019c366004611213565b6103b3565b6101c87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610150565b6101e861041f565b60405160ff9091168152602001610150565b61016c6102083660046111e9565b6104b7565b61018061021b36600461124f565b6001600160a01b031660009081526020819052604090205490565b61023e6104f6565b005b61023e61024e366004611278565b610561565b6101c861061e565b6005546001600160a01b03166101c8565b610143610632565b61016c6102823660046111e9565b610641565b61016c6102953660046111e9565b6106f6565b61016c6102a836600461124f565b60066020526000908152604090205460ff1681565b6101806102cb3660046112af565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61023e61030436600461124f565b61075c565b606060038054610318906112e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610344906112e2565b80156103915780601f1061036657610100808354040283529160200191610391565b820191906000526020600020905b81548152906001019060200180831161037457829003601f168201915b5050505050905090565b6000336103a981858561083e565b5060019392505050565b3360009081526006602052604081205460ff161561040a576103d58483610963565b61040a6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016853085610a42565b610415848484610ae0565b90505b9392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561047a57600080fd5b505afa15801561048e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b2919061131d565b905090565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906103a990829086906104f1908790611356565b61083e565b6005546001600160a01b031633146105555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61055f6000610af9565b565b6005546001600160a01b031633146105bb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161054c565b6001600160a01b038216600081815260066020908152604091829020805460ff19168515159081179091558251938452908301527fc055b4e789c2063cb72e97133fc94c4af61fd9b04767fa06b1946698aa66ca40910160405180910390a15050565b60006104b26005546001600160a01b031690565b606060048054610318906112e2565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156106de5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161054c565b6106eb828686840361083e565b506001949350505050565b6000806107038484610b63565b3360009081526006602052604090205490915060ff1615610418576107288484610b71565b6104186001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168585610cbc565b6005546001600160a01b031633146107b65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161054c565b6001600160a01b0381166108325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161054c565b61083b81610af9565b50565b6001600160a01b0383166108a05760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161054c565b6001600160a01b0382166109015760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161054c565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0382166109b95760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161054c565b80600260008282546109cb9190611356565b90915550506001600160a01b038216600090815260208190526040812080548392906109f8908490611356565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610ada9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610cec565b50505050565b600033610aee858285610dd1565b6106eb858585610e5d565b600580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000336103a9818585610e5d565b6001600160a01b038216610bd15760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161054c565b6001600160a01b03821660009081526020819052604090205481811015610c455760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161054c565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610c7490849061136e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610956565b505050565b6040516001600160a01b038316602482015260448101829052610cb790849063a9059cbb60e01b90606401610a76565b6000610d41826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661105a9092919063ffffffff16565b805190915015610cb75780806020019051810190610d5f9190611385565b610cb75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161054c565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610ada5781811015610e505760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161054c565b610ada848484840361083e565b6001600160a01b038316610ed95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161054c565b6001600160a01b038216610f3b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161054c565b6001600160a01b03831660009081526020819052604090205481811015610fca5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161054c565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611001908490611356565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161104d91815260200190565b60405180910390a3610ada565b60606104158484600085856001600160a01b0385163b6110bc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161054c565b600080866001600160a01b031685876040516110d891906113a2565b60006040518083038185875af1925050503d8060008114611115576040519150601f19603f3d011682016040523d82523d6000602084013e61111a565b606091505b509150915061112a828286611135565b979650505050505050565b60608315611144575081610418565b8251156111545782518084602001fd5b8160405162461bcd60e51b815260040161054c919061119a565b60005b83811015611189578181015183820152602001611171565b83811115610ada5750506000910152565b60208152600082518060208401526111b981604085016020870161116e565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146111e457600080fd5b919050565b600080604083850312156111fc57600080fd5b611205836111cd565b946020939093013593505050565b60008060006060848603121561122857600080fd5b611231846111cd565b925061123f602085016111cd565b9150604084013590509250925092565b60006020828403121561126157600080fd5b610418826111cd565b801515811461083b57600080fd5b6000806040838503121561128b57600080fd5b611294836111cd565b915060208301356112a48161126a565b809150509250929050565b600080604083850312156112c257600080fd5b6112cb836111cd565b91506112d9602084016111cd565b90509250929050565b600181811c908216806112f657607f821691505b6020821081141561131757634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561132f57600080fd5b815160ff8116811461041857600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561136957611369611340565b500190565b60008282101561138057611380611340565b500390565b60006020828403121561139757600080fd5b81516104188161126a565b600082516113b481846020870161116e565b919091019291505056fea2646970667358221220fc76f130df1abc27ebd254ec8ad9ca728c0cc68c0a08d2f5c2d989f2c686ba4364736f6c63430008090033";

type IntermediaryOriginalTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IntermediaryOriginalTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IntermediaryOriginalToken__factory extends ContractFactory {
  constructor(...args: IntermediaryOriginalTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "IntermediaryOriginalToken";
  }

  deploy(
    name_: string,
    symbol_: string,
    bridges_: string[],
    canonical_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<IntermediaryOriginalToken> {
    return super.deploy(
      name_,
      symbol_,
      bridges_,
      canonical_,
      overrides || {}
    ) as Promise<IntermediaryOriginalToken>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    bridges_: string[],
    canonical_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      bridges_,
      canonical_,
      overrides || {}
    );
  }
  attach(address: string): IntermediaryOriginalToken {
    return super.attach(address) as IntermediaryOriginalToken;
  }
  connect(signer: Signer): IntermediaryOriginalToken__factory {
    return super.connect(signer) as IntermediaryOriginalToken__factory;
  }
  static readonly contractName: "IntermediaryOriginalToken";
  public readonly contractName: "IntermediaryOriginalToken";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IntermediaryOriginalTokenInterface {
    return new utils.Interface(_abi) as IntermediaryOriginalTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IntermediaryOriginalToken {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IntermediaryOriginalToken;
  }
}
