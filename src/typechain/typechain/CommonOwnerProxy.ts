/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CommonOwnerProxyInterface extends utils.Interface {
  contractName: "CommonOwnerProxy";
  functions: {
    "gov()": FunctionFragment;
    "initGov(address)": FunctionFragment;
    "proposeTransferOwnership(address,uint256)": FunctionFragment;
    "proposeUpdatePauser(address,uint8,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "initGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proposeTransferOwnership",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpdatePauser",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpdatePauser",
    data: BytesLike
  ): Result;

  events: {
    "TransferOwnershipProposalCreated(uint256,address,uint256)": EventFragment;
    "UpdatePauserProposalCreated(uint256,address,uint8,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "TransferOwnershipProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePauserProposalCreated"
  ): EventFragment;
}

export type TransferOwnershipProposalCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { proposalId: BigNumber; target: string; newOwner: BigNumber }
>;

export type TransferOwnershipProposalCreatedEventFilter =
  TypedEventFilter<TransferOwnershipProposalCreatedEvent>;

export type UpdatePauserProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, string],
  { proposalId: BigNumber; target: string; action: number; account: string }
>;

export type UpdatePauserProposalCreatedEventFilter =
  TypedEventFilter<UpdatePauserProposalCreatedEvent>;

export interface CommonOwnerProxy extends BaseContract {
  contractName: "CommonOwnerProxy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CommonOwnerProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gov(overrides?: CallOverrides): Promise<[string]>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeTransferOwnership(
      _target: string,
      _newOwner: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpdatePauser(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  gov(overrides?: CallOverrides): Promise<string>;

  initGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeTransferOwnership(
    _target: string,
    _newOwner: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpdatePauser(
    _target: string,
    _action: BigNumberish,
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    gov(overrides?: CallOverrides): Promise<string>;

    initGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    proposeTransferOwnership(
      _target: string,
      _newOwner: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpdatePauser(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TransferOwnershipProposalCreated(uint256,address,uint256)"(
      proposalId?: null,
      target?: null,
      newOwner?: null
    ): TransferOwnershipProposalCreatedEventFilter;
    TransferOwnershipProposalCreated(
      proposalId?: null,
      target?: null,
      newOwner?: null
    ): TransferOwnershipProposalCreatedEventFilter;

    "UpdatePauserProposalCreated(uint256,address,uint8,address)"(
      proposalId?: null,
      target?: null,
      action?: null,
      account?: null
    ): UpdatePauserProposalCreatedEventFilter;
    UpdatePauserProposalCreated(
      proposalId?: null,
      target?: null,
      action?: null,
      account?: null
    ): UpdatePauserProposalCreatedEventFilter;
  };

  estimateGas: {
    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeTransferOwnership(
      _target: string,
      _newOwner: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpdatePauser(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeTransferOwnership(
      _target: string,
      _newOwner: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpdatePauser(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
