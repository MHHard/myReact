/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  IntermediaryBridgeToken,
  IntermediaryBridgeTokenInterface,
} from "../IntermediaryBridgeToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "address",
        name: "bridge_",
        type: "address",
      },
      {
        internalType: "address",
        name: "canonical_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "bridge",
        type: "address",
      },
    ],
    name: "BridgeUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "canonical",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridge",
        type: "address",
      },
    ],
    name: "updateBridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620018b1380380620018b183398101604081905262000034916200028f565b8351849084906200004d906003906020850190620000ff565b50805162000063906004906020840190620000ff565b505050620000806200007a620000a960201b60201c565b620000ad565b600680546001600160a01b0319166001600160a01b0393841617905516608052506200035b9050565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200010d906200031e565b90600052602060002090601f0160209004810192826200013157600085556200017c565b82601f106200014c57805160ff19168380011785556200017c565b828001600101855582156200017c579182015b828111156200017c5782518255916020019190600101906200015f565b506200018a9291506200018e565b5090565b5b808211156200018a57600081556001016200018f565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001cd57600080fd5b81516001600160401b0380821115620001ea57620001ea620001a5565b604051601f8301601f19908116603f01168101908282118183101715620002155762000215620001a5565b816040528381526020925086838588010111156200023257600080fd5b600091505b8382101562000256578582018301518183018401529082019062000237565b83821115620002685760008385830101525b9695505050505050565b80516001600160a01b03811681146200028a57600080fd5b919050565b60008060008060808587031215620002a657600080fd5b84516001600160401b0380821115620002be57600080fd5b620002cc88838901620001bb565b95506020870151915080821115620002e357600080fd5b50620002f287828801620001bb565b935050620003036040860162000272565b9150620003136060860162000272565b905092959194509250565b600181811c908216806200033357607f821691505b602082108114156200035557634e487b7160e01b600052602260045260246000fd5b50919050565b60805161151e62000393600039600081816101dc015281816104290152818161058e015281816107ac01526107ea015261151e6000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063715018a6116100cd578063a457c2d711610081578063dd62ed3e11610066578063dd62ed3e146102f6578063e78cea921461032f578063f2fde38b1461034257600080fd5b8063a457c2d7146102d0578063a9059cbb146102e357600080fd5b80638da5cb5b116100b25780638da5cb5b146102a457806395d89b41146102b55780639dc29fac146102bd57600080fd5b8063715018a614610294578063893d20e81461029c57600080fd5b8063313ce5671161012457806340c10f191161010957806340c10f19146102435780636eb382121461025657806370a082311461026b57600080fd5b8063313ce56714610216578063395093511461023057600080fd5b806318160ddd1161015557806318160ddd146101b257806323b872dd146101c457806326afaadd146101d757600080fd5b806306fdde0314610171578063095ea7b31461018f575b600080fd5b610179610355565b6040516101869190611304565b60405180910390f35b6101a261019d366004611353565b6103e7565b6040519015158152602001610186565b6002545b604051908152602001610186565b6101a26101d236600461137d565b6103ff565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610186565b61021e610425565b60405160ff9091168152602001610186565b6101a261023e366004611353565b6104bd565b6101a2610251366004611353565b6104fc565b6102696102643660046113b9565b6105f4565b005b6101b66102793660046113b9565b6001600160a01b031660009081526020819052604090205490565b6102696106af565b6101fe610715565b6005546001600160a01b03166101fe565b610179610729565b6101a26102cb366004611353565b610738565b6101a26102de366004611353565b610821565b6101a26102f1366004611353565b6108d6565b6101b66103043660046113d4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6006546101fe906001600160a01b031681565b6102696103503660046113b9565b6108e4565b60606003805461036490611407565b80601f016020809104026020016040519081016040528092919081815260200182805461039090611407565b80156103dd5780601f106103b2576101008083540402835291602001916103dd565b820191906000526020600020905b8154815290600101906020018083116103c057829003601f168201915b5050505050905090565b6000336103f58185856109c6565b5060019392505050565b60003361040d858285610aeb565b610418858585610b7d565b60019150505b9392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561048057600080fd5b505afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b89190611442565b905090565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906103f590829086906104f790879061147b565b6109c6565b6006546000906001600160a01b0316331461055e5760405162461bcd60e51b815260206004820152601460248201527f63616c6c6572206973206e6f742062726964676500000000000000000000000060448201526064015b60405180910390fd5b6105683083610d7a565b6040516340c10f1960e01b81526001600160a01b038481166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906044015b600060405180830381600087803b1580156105d357600080fd5b505af11580156105e7573d6000803e3d6000fd5b5060019695505050505050565b6005546001600160a01b0316331461064e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610555565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fe1694c0b21fdceff6411daed547c7463c2341b9695387bc82595b5b9b1851d4a9060200160405180910390a150565b6005546001600160a01b031633146107095760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610555565b6107136000610e59565b565b60006104b86005546001600160a01b031690565b60606004805461036490611407565b6006546000906001600160a01b031633146107955760405162461bcd60e51b815260206004820152601460248201527f63616c6c6572206973206e6f74206272696467650000000000000000000000006044820152606401610555565b61079f3083610eb8565b6107d46001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016843085611003565b604051630852cd8d60e31b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c68906024016105b9565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156108be5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610555565b6108cb82868684036109c6565b506001949350505050565b6000336103f5818585610b7d565b6005546001600160a01b0316331461093e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610555565b6001600160a01b0381166109ba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610555565b6109c381610e59565b50565b6001600160a01b038316610a285760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610555565b6001600160a01b038216610a895760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610555565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610b775781811015610b6a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610555565b610b7784848484036109c6565b50505050565b6001600160a01b038316610bf95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610555565b6001600160a01b038216610c5b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610555565b6001600160a01b03831660009081526020819052604090205481811015610cea5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610555565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610d2190849061147b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d6d91815260200190565b60405180910390a3610b77565b6001600160a01b038216610dd05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610555565b8060026000828254610de2919061147b565b90915550506001600160a01b03821660009081526020819052604081208054839290610e0f90849061147b565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216610f185760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610555565b6001600160a01b03821660009081526020819052604090205481811015610f8c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610555565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610fbb908490611493565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610ade565b505050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610b77928792916000916110b0918516908490611140565b805190915015610ffe57808060200190518101906110ce91906114aa565b610ffe5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610555565b606061114f8484600085611157565b949350505050565b6060824710156111cf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610555565b6001600160a01b0385163b6112265760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610555565b600080866001600160a01b0316858760405161124291906114cc565b60006040518083038185875af1925050503d806000811461127f576040519150601f19603f3d011682016040523d82523d6000602084013e611284565b606091505b509150915061129482828661129f565b979650505050505050565b606083156112ae57508161041e565b8251156112be5782518084602001fd5b8160405162461bcd60e51b81526004016105559190611304565b60005b838110156112f35781810151838201526020016112db565b83811115610b775750506000910152565b60208152600082518060208401526113238160408501602087016112d8565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461134e57600080fd5b919050565b6000806040838503121561136657600080fd5b61136f83611337565b946020939093013593505050565b60008060006060848603121561139257600080fd5b61139b84611337565b92506113a960208501611337565b9150604084013590509250925092565b6000602082840312156113cb57600080fd5b61041e82611337565b600080604083850312156113e757600080fd5b6113f083611337565b91506113fe60208401611337565b90509250929050565b600181811c9082168061141b57607f821691505b6020821081141561143c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561145457600080fd5b815160ff8116811461041e57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561148e5761148e611465565b500190565b6000828210156114a5576114a5611465565b500390565b6000602082840312156114bc57600080fd5b8151801515811461041e57600080fd5b600082516114de8184602087016112d8565b919091019291505056fea2646970667358221220ba5ee1a4ac863a37c424eec787cf6b2154bd086d0f4037d09cd00ba89228451b64736f6c63430008090033";

type IntermediaryBridgeTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IntermediaryBridgeTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IntermediaryBridgeToken__factory extends ContractFactory {
  constructor(...args: IntermediaryBridgeTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "IntermediaryBridgeToken";
  }

  deploy(
    name_: string,
    symbol_: string,
    bridge_: string,
    canonical_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<IntermediaryBridgeToken> {
    return super.deploy(
      name_,
      symbol_,
      bridge_,
      canonical_,
      overrides || {}
    ) as Promise<IntermediaryBridgeToken>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    bridge_: string,
    canonical_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      bridge_,
      canonical_,
      overrides || {}
    );
  }
  attach(address: string): IntermediaryBridgeToken {
    return super.attach(address) as IntermediaryBridgeToken;
  }
  connect(signer: Signer): IntermediaryBridgeToken__factory {
    return super.connect(signer) as IntermediaryBridgeToken__factory;
  }
  static readonly contractName: "IntermediaryBridgeToken";
  public readonly contractName: "IntermediaryBridgeToken";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IntermediaryBridgeTokenInterface {
    return new utils.Interface(_abi) as IntermediaryBridgeTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IntermediaryBridgeToken {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IntermediaryBridgeToken;
  }
}
