/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MessageOwnerProxyInterface extends utils.Interface {
  contractName: "MessageOwnerProxy";
  functions: {
    "gov()": FunctionFragment;
    "initGov(address)": FunctionFragment;
    "proposeSetBridgeAddress(address,uint8,address)": FunctionFragment;
    "proposeSetMsgFee(address,uint8,uint256)": FunctionFragment;
    "proposeSetPreExecuteMessageGasUsage(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "initGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proposeSetBridgeAddress",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetMsgFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetPreExecuteMessageGasUsage",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetMsgFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetPreExecuteMessageGasUsage",
    data: BytesLike
  ): Result;

  events: {
    "SetBridgeAddressProposalCreated(uint256,address,uint8,address)": EventFragment;
    "SetMsgFeeProposalCreated(uint256,address,uint8,uint256)": EventFragment;
    "SetPreExecuteMessageGasUsageProposalCreated(uint256,address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "SetBridgeAddressProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMsgFeeProposalCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetPreExecuteMessageGasUsageProposalCreated"
  ): EventFragment;
}

export type SetBridgeAddressProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, string],
  {
    proposalId: BigNumber;
    target: string;
    bridgeType: number;
    bridgeAddr: string;
  }
>;

export type SetBridgeAddressProposalCreatedEventFilter =
  TypedEventFilter<SetBridgeAddressProposalCreatedEvent>;

export type SetMsgFeeProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  { proposalId: BigNumber; target: string; feeType: number; fee: BigNumber }
>;

export type SetMsgFeeProposalCreatedEventFilter =
  TypedEventFilter<SetMsgFeeProposalCreatedEvent>;

export type SetPreExecuteMessageGasUsageProposalCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { proposalId: BigNumber; target: string; usage: BigNumber }
>;

export type SetPreExecuteMessageGasUsageProposalCreatedEventFilter =
  TypedEventFilter<SetPreExecuteMessageGasUsageProposalCreatedEvent>;

export interface MessageOwnerProxy extends BaseContract {
  contractName: "MessageOwnerProxy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MessageOwnerProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gov(overrides?: CallOverrides): Promise<[string]>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetBridgeAddress(
      _target: string,
      _bridgeType: BigNumberish,
      _bridgeAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetMsgFee(
      _target: string,
      _feeType: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetPreExecuteMessageGasUsage(
      _target: string,
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  gov(overrides?: CallOverrides): Promise<string>;

  initGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetBridgeAddress(
    _target: string,
    _bridgeType: BigNumberish,
    _bridgeAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetMsgFee(
    _target: string,
    _feeType: BigNumberish,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetPreExecuteMessageGasUsage(
    _target: string,
    _usage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    gov(overrides?: CallOverrides): Promise<string>;

    initGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    proposeSetBridgeAddress(
      _target: string,
      _bridgeType: BigNumberish,
      _bridgeAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetMsgFee(
      _target: string,
      _feeType: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetPreExecuteMessageGasUsage(
      _target: string,
      _usage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetBridgeAddressProposalCreated(uint256,address,uint8,address)"(
      proposalId?: null,
      target?: null,
      bridgeType?: null,
      bridgeAddr?: null
    ): SetBridgeAddressProposalCreatedEventFilter;
    SetBridgeAddressProposalCreated(
      proposalId?: null,
      target?: null,
      bridgeType?: null,
      bridgeAddr?: null
    ): SetBridgeAddressProposalCreatedEventFilter;

    "SetMsgFeeProposalCreated(uint256,address,uint8,uint256)"(
      proposalId?: null,
      target?: null,
      feeType?: null,
      fee?: null
    ): SetMsgFeeProposalCreatedEventFilter;
    SetMsgFeeProposalCreated(
      proposalId?: null,
      target?: null,
      feeType?: null,
      fee?: null
    ): SetMsgFeeProposalCreatedEventFilter;

    "SetPreExecuteMessageGasUsageProposalCreated(uint256,address,uint256)"(
      proposalId?: null,
      target?: null,
      usage?: null
    ): SetPreExecuteMessageGasUsageProposalCreatedEventFilter;
    SetPreExecuteMessageGasUsageProposalCreated(
      proposalId?: null,
      target?: null,
      usage?: null
    ): SetPreExecuteMessageGasUsageProposalCreatedEventFilter;
  };

  estimateGas: {
    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetBridgeAddress(
      _target: string,
      _bridgeType: BigNumberish,
      _bridgeAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetMsgFee(
      _target: string,
      _feeType: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetPreExecuteMessageGasUsage(
      _target: string,
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetBridgeAddress(
      _target: string,
      _bridgeType: BigNumberish,
      _bridgeAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetMsgFee(
      _target: string,
      _feeType: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetPreExecuteMessageGasUsage(
      _target: string,
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
