/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace TransferAgent {
  export type ExtensionStruct = { Type: BigNumberish; Value: BytesLike };

  export type ExtensionStructOutput = [number, string] & {
    Type: number;
    Value: string;
  };
}

export interface TransferAgentInterface extends utils.Interface {
  contractName: "TransferAgent";
  functions: {
    "bridges(uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "setBridgeAddress(uint8,address)": FunctionFragment;
    "transfer(bytes,address,uint256,uint64,uint64,uint32,uint8,(uint8,bytes)[])": FunctionFragment;
    "transferNative(bytes,uint256,uint64,uint64,uint32,uint8,(uint8,bytes)[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bridges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBridgeAddress",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      TransferAgent.ExtensionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferNative",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      TransferAgent.ExtensionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "bridges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BridgeUpdated(uint8,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Supplement(uint8,bytes32,address,bytes,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Supplement"): EventFragment;
}

export type BridgeUpdatedEvent = TypedEvent<
  [number, string],
  { bridgeSendType: number; bridgeAddr: string }
>;

export type BridgeUpdatedEventFilter = TypedEventFilter<BridgeUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SupplementEvent = TypedEvent<
  [number, string, string, string, TransferAgent.ExtensionStructOutput[]],
  {
    bridgeSendType: number;
    transferId: string;
    sender: string;
    receiver: string;
    extensions: TransferAgent.ExtensionStructOutput[];
  }
>;

export type SupplementEventFilter = TypedEventFilter<SupplementEvent>;

export interface TransferAgent extends BaseContract {
  contractName: "TransferAgent";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TransferAgentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridges(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setBridgeAddress(
      _bridgeSendType: BigNumberish,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer(
      _receiver: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _dstChainId: BigNumberish,
      _nonce: BigNumberish,
      _maxSlippage: BigNumberish,
      _bridgeSendType: BigNumberish,
      _extensions: TransferAgent.ExtensionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferNative(
      _receiver: BytesLike,
      _amount: BigNumberish,
      _dstChainId: BigNumberish,
      _nonce: BigNumberish,
      _maxSlippage: BigNumberish,
      _bridgeSendType: BigNumberish,
      _extensions: TransferAgent.ExtensionStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bridges(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setBridgeAddress(
    _bridgeSendType: BigNumberish,
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer(
    _receiver: BytesLike,
    _token: string,
    _amount: BigNumberish,
    _dstChainId: BigNumberish,
    _nonce: BigNumberish,
    _maxSlippage: BigNumberish,
    _bridgeSendType: BigNumberish,
    _extensions: TransferAgent.ExtensionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferNative(
    _receiver: BytesLike,
    _amount: BigNumberish,
    _dstChainId: BigNumberish,
    _nonce: BigNumberish,
    _maxSlippage: BigNumberish,
    _bridgeSendType: BigNumberish,
    _extensions: TransferAgent.ExtensionStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bridges(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setBridgeAddress(
      _bridgeSendType: BigNumberish,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      _receiver: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _dstChainId: BigNumberish,
      _nonce: BigNumberish,
      _maxSlippage: BigNumberish,
      _bridgeSendType: BigNumberish,
      _extensions: TransferAgent.ExtensionStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    transferNative(
      _receiver: BytesLike,
      _amount: BigNumberish,
      _dstChainId: BigNumberish,
      _nonce: BigNumberish,
      _maxSlippage: BigNumberish,
      _bridgeSendType: BigNumberish,
      _extensions: TransferAgent.ExtensionStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BridgeUpdated(uint8,address)"(
      bridgeSendType?: null,
      bridgeAddr?: null
    ): BridgeUpdatedEventFilter;
    BridgeUpdated(
      bridgeSendType?: null,
      bridgeAddr?: null
    ): BridgeUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Supplement(uint8,bytes32,address,bytes,tuple[])"(
      bridgeSendType?: null,
      transferId?: null,
      sender?: null,
      receiver?: null,
      extensions?: null
    ): SupplementEventFilter;
    Supplement(
      bridgeSendType?: null,
      transferId?: null,
      sender?: null,
      receiver?: null,
      extensions?: null
    ): SupplementEventFilter;
  };

  estimateGas: {
    bridges(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setBridgeAddress(
      _bridgeSendType: BigNumberish,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer(
      _receiver: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _dstChainId: BigNumberish,
      _nonce: BigNumberish,
      _maxSlippage: BigNumberish,
      _bridgeSendType: BigNumberish,
      _extensions: TransferAgent.ExtensionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferNative(
      _receiver: BytesLike,
      _amount: BigNumberish,
      _dstChainId: BigNumberish,
      _nonce: BigNumberish,
      _maxSlippage: BigNumberish,
      _bridgeSendType: BigNumberish,
      _extensions: TransferAgent.ExtensionStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBridgeAddress(
      _bridgeSendType: BigNumberish,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      _receiver: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _dstChainId: BigNumberish,
      _nonce: BigNumberish,
      _maxSlippage: BigNumberish,
      _bridgeSendType: BigNumberish,
      _extensions: TransferAgent.ExtensionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferNative(
      _receiver: BytesLike,
      _amount: BigNumberish,
      _dstChainId: BigNumberish,
      _nonce: BigNumberish,
      _maxSlippage: BigNumberish,
      _bridgeSendType: BigNumberish,
      _extensions: TransferAgent.ExtensionStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
