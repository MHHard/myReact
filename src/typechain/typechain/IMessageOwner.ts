/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IMessageOwnerInterface extends utils.Interface {
  contractName: "IMessageOwner";
  functions: {
    "setFeeBase(uint256)": FunctionFragment;
    "setFeePerByte(uint256)": FunctionFragment;
    "setLiquidityBridge(address)": FunctionFragment;
    "setPegBridge(address)": FunctionFragment;
    "setPegBridgeV2(address)": FunctionFragment;
    "setPegVault(address)": FunctionFragment;
    "setPegVaultV2(address)": FunctionFragment;
    "setPreExecuteMessageGasUsage(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setFeeBase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePerByte",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityBridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPegBridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPegBridgeV2",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setPegVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPegVaultV2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPreExecuteMessageGasUsage",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "setFeeBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeePerByte",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPegBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPegBridgeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPegVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPegVaultV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPreExecuteMessageGasUsage",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMessageOwner extends BaseContract {
  contractName: "IMessageOwner";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMessageOwnerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setFeeBase(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeePerByte(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPegBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPegBridgeV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPegVault(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPegVaultV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPreExecuteMessageGasUsage(
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  setFeeBase(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeePerByte(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityBridge(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPegBridge(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPegBridgeV2(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPegVault(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPegVaultV2(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPreExecuteMessageGasUsage(
    _usage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    setFeeBase(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeePerByte(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setLiquidityBridge(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPegBridge(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPegBridgeV2(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPegVault(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPegVaultV2(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPreExecuteMessageGasUsage(
      _usage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    setFeeBase(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeePerByte(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPegBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPegBridgeV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPegVault(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPegVaultV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPreExecuteMessageGasUsage(
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setFeeBase(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeePerByte(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPegBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPegBridgeV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPegVault(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPegVaultV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPreExecuteMessageGasUsage(
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
