/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IBridgeOwnerInterface extends utils.Interface {
  contractName: "IBridgeOwner";
  functions: {
    "addGovernor(address)": FunctionFragment;
    "decreaseSupply(address,uint256)": FunctionFragment;
    "increaseNoticePeriod(uint256)": FunctionFragment;
    "increaseSupply(address,uint256)": FunctionFragment;
    "notifyResetSigners()": FunctionFragment;
    "removeGovernor(address)": FunctionFragment;
    "resetSigners(address[],uint256[])": FunctionFragment;
    "setBridgeTokenSwapCap(address,uint256)": FunctionFragment;
    "setSupply(address,uint256)": FunctionFragment;
    "setWrap(address)": FunctionFragment;
    "updateBridge(address)": FunctionFragment;
    "updateBridgeSupplyCap(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addGovernor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "decreaseSupply",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseNoticePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseSupply",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyResetSigners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resetSigners",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeTokenSwapCap",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupply",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setWrap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateBridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBridgeSupplyCap",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseNoticePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyResetSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeTokenSwapCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBridgeSupplyCap",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IBridgeOwner extends BaseContract {
  contractName: "IBridgeOwner";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBridgeOwnerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseSupply(
      _token: string,
      _delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseNoticePeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseSupply(
      _token: string,
      _delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    notifyResetSigners(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetSigners(
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBridgeTokenSwapCap(
      _bridgeToken: string,
      _swapCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupply(
      _token: string,
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWrap(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBridge(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBridgeSupplyCap(
      _bridge: string,
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addGovernor(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseSupply(
    _token: string,
    _delta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseNoticePeriod(
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseSupply(
    _token: string,
    _delta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  notifyResetSigners(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeGovernor(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetSigners(
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBridgeTokenSwapCap(
    _bridgeToken: string,
    _swapCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupply(
    _token: string,
    _supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWrap(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBridge(
    _bridge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBridgeSupplyCap(
    _bridge: string,
    _cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGovernor(_account: string, overrides?: CallOverrides): Promise<void>;

    decreaseSupply(
      _token: string,
      _delta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseNoticePeriod(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseSupply(
      _token: string,
      _delta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    notifyResetSigners(overrides?: CallOverrides): Promise<void>;

    removeGovernor(_account: string, overrides?: CallOverrides): Promise<void>;

    resetSigners(
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeTokenSwapCap(
      _bridgeToken: string,
      _swapCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupply(
      _token: string,
      _supply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWrap(_token: string, overrides?: CallOverrides): Promise<void>;

    updateBridge(_bridge: string, overrides?: CallOverrides): Promise<void>;

    updateBridgeSupplyCap(
      _bridge: string,
      _cap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseSupply(
      _token: string,
      _delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseNoticePeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseSupply(
      _token: string,
      _delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    notifyResetSigners(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetSigners(
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBridgeTokenSwapCap(
      _bridgeToken: string,
      _swapCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupply(
      _token: string,
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWrap(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBridge(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBridgeSupplyCap(
      _bridge: string,
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseSupply(
      _token: string,
      _delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseNoticePeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseSupply(
      _token: string,
      _delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    notifyResetSigners(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetSigners(
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeTokenSwapCap(
      _bridgeToken: string,
      _swapCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupply(
      _token: string,
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWrap(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBridge(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBridgeSupplyCap(
      _bridge: string,
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
