/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GovernedOwnerProxyInterface extends utils.Interface {
  contractName: "GovernedOwnerProxy";
  functions: {
    "gov()": FunctionFragment;
    "initGov(address)": FunctionFragment;
    "proposeChangeProxyAdmin(address,address,address)": FunctionFragment;
    "proposeDrainToken(address,address,uint256)": FunctionFragment;
    "proposeIncreaseNoticePeriod(address,uint256)": FunctionFragment;
    "proposeNotifyResetSigners(address)": FunctionFragment;
    "proposeResetSigners(address,address[],uint256[])": FunctionFragment;
    "proposeSetBridgeAddress(address,uint8,address)": FunctionFragment;
    "proposeSetBridgeTokenSwapCap(address,address,uint256)": FunctionFragment;
    "proposeSetGovContract(address,address)": FunctionFragment;
    "proposeSetMaxSlashFactor(address,uint256)": FunctionFragment;
    "proposeSetMsgFee(address,uint8,uint256)": FunctionFragment;
    "proposeSetNativeWrap(address,address)": FunctionFragment;
    "proposeSetPreExecuteMessageGasUsage(address,uint256)": FunctionFragment;
    "proposeSetRewardContract(address,address)": FunctionFragment;
    "proposeSetWhitelistEnable(address,bool)": FunctionFragment;
    "proposeTransferOwnership(address,uint256)": FunctionFragment;
    "proposeUpdateBridgeSupplyCap(address,address,uint256)": FunctionFragment;
    "proposeUpdateGovernor(address,uint8,address)": FunctionFragment;
    "proposeUpdatePauser(address,uint8,address)": FunctionFragment;
    "proposeUpdateSupply(address,uint8,address,uint256)": FunctionFragment;
    "proposeUpdateWhitelisted(address,uint8,address)": FunctionFragment;
    "proposeUpgrade(address,address,address)": FunctionFragment;
    "proposeUpgradeAndCall(address,address,address,bytes)": FunctionFragment;
    "proposeUpgradeTo(address,address)": FunctionFragment;
    "proposeUpgradeToAndCall(address,address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "initGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proposeChangeProxyAdmin",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeDrainToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeIncreaseNoticePeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNotifyResetSigners",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeResetSigners",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetBridgeAddress",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetBridgeTokenSwapCap",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetGovContract",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetMaxSlashFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetMsgFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetNativeWrap",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetPreExecuteMessageGasUsage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetRewardContract",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetWhitelistEnable",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeTransferOwnership",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpdateBridgeSupplyCap",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpdateGovernor",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpdatePauser",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpdateSupply",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpdateWhitelisted",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpgrade",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpgradeAndCall",
    values: [string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpgradeTo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpgradeToAndCall",
    values: [string, string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeChangeProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeDrainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeIncreaseNoticePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNotifyResetSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeResetSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetBridgeTokenSwapCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetGovContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetMaxSlashFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetMsgFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetNativeWrap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetPreExecuteMessageGasUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetRewardContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetWhitelistEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpdateBridgeSupplyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpdateGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpdatePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpdateSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpdateWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpgradeAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpgradeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "ChangeProxyAdminProposalCreated(uint256,address,address,address)": EventFragment;
    "DrainTokenProposalCreated(uint256,address,address,uint256)": EventFragment;
    "IncreaseNoticePeriodProposalCreated(uint256,address,uint256)": EventFragment;
    "NotifyResetSignersProposalCreated(uint256,address)": EventFragment;
    "ResetSignersProposalCreated(uint256,address,address[],uint256[])": EventFragment;
    "SetBridgeAddressProposalCreated(uint256,address,uint8,address)": EventFragment;
    "SetBridgeTokenSwapCapProposalCreated(uint256,address,address,uint256)": EventFragment;
    "SetGovContractProposalCreated(uint256,address,address)": EventFragment;
    "SetMaxSlashFactorProposalCreated(uint256,address,uint256)": EventFragment;
    "SetMsgFeeProposalCreated(uint256,address,uint8,uint256)": EventFragment;
    "SetNativeWrapProposalCreated(uint256,address,address)": EventFragment;
    "SetPreExecuteMessageGasUsageProposalCreated(uint256,address,uint256)": EventFragment;
    "SetRewardContractProposalCreated(uint256,address,address)": EventFragment;
    "SetWhitelistEnableProposalCreated(uint256,address,bool)": EventFragment;
    "TransferOwnershipProposalCreated(uint256,address,uint256)": EventFragment;
    "UpdateBridgeProposalCreated(uint256,address,address)": EventFragment;
    "UpdateBridgeSupplyCapProposalCreated(uint256,address,address,uint256)": EventFragment;
    "UpdateGovernorProposalCreated(uint256,address,uint8,address)": EventFragment;
    "UpdatePauserProposalCreated(uint256,address,uint8,address)": EventFragment;
    "UpdateSupplyProposalCreated(uint256,address,uint8,address,uint256)": EventFragment;
    "UpdateWhitelistedProposalCreated(uint256,address,uint8,address)": EventFragment;
    "UpgradeAndCallProposalCreated(uint256,address,address,address,bytes)": EventFragment;
    "UpgradeProposalCreated(uint256,address,address,address)": EventFragment;
    "UpgradeToAndCallProposalCreated(uint256,address,address,bytes)": EventFragment;
    "UpgradeToProposalCreated(uint256,address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ChangeProxyAdminProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrainTokenProposalCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IncreaseNoticePeriodProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NotifyResetSignersProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ResetSignersProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetBridgeAddressProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetBridgeTokenSwapCapProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetGovContractProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetMaxSlashFactorProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMsgFeeProposalCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetNativeWrapProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetPreExecuteMessageGasUsageProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetRewardContractProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetWhitelistEnableProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferOwnershipProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateBridgeProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateBridgeSupplyCapProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateGovernorProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePauserProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateSupplyProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateWhitelistedProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpgradeAndCallProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeProposalCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpgradeToAndCallProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeToProposalCreated"): EventFragment;
}

export type ChangeProxyAdminProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, string],
  { proposalId: BigNumber; target: string; proxy: string; newAdmin: string }
>;

export type ChangeProxyAdminProposalCreatedEventFilter =
  TypedEventFilter<ChangeProxyAdminProposalCreatedEvent>;

export type DrainTokenProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { proposalId: BigNumber; target: string; token: string; amount: BigNumber }
>;

export type DrainTokenProposalCreatedEventFilter =
  TypedEventFilter<DrainTokenProposalCreatedEvent>;

export type IncreaseNoticePeriodProposalCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { proposalId: BigNumber; target: string; period: BigNumber }
>;

export type IncreaseNoticePeriodProposalCreatedEventFilter =
  TypedEventFilter<IncreaseNoticePeriodProposalCreatedEvent>;

export type NotifyResetSignersProposalCreatedEvent = TypedEvent<
  [BigNumber, string],
  { proposalId: BigNumber; target: string }
>;

export type NotifyResetSignersProposalCreatedEventFilter =
  TypedEventFilter<NotifyResetSignersProposalCreatedEvent>;

export type ResetSignersProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string[], BigNumber[]],
  {
    proposalId: BigNumber;
    target: string;
    signers: string[];
    powers: BigNumber[];
  }
>;

export type ResetSignersProposalCreatedEventFilter =
  TypedEventFilter<ResetSignersProposalCreatedEvent>;

export type SetBridgeAddressProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, string],
  {
    proposalId: BigNumber;
    target: string;
    bridgeType: number;
    bridgeAddr: string;
  }
>;

export type SetBridgeAddressProposalCreatedEventFilter =
  TypedEventFilter<SetBridgeAddressProposalCreatedEvent>;

export type SetBridgeTokenSwapCapProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { proposalId: BigNumber; target: string; bridgeToken: string; cap: BigNumber }
>;

export type SetBridgeTokenSwapCapProposalCreatedEventFilter =
  TypedEventFilter<SetBridgeTokenSwapCapProposalCreatedEvent>;

export type SetGovContractProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  { proposalId: BigNumber; target: string; addr: string }
>;

export type SetGovContractProposalCreatedEventFilter =
  TypedEventFilter<SetGovContractProposalCreatedEvent>;

export type SetMaxSlashFactorProposalCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { proposalId: BigNumber; target: string; maxSlashFactor: BigNumber }
>;

export type SetMaxSlashFactorProposalCreatedEventFilter =
  TypedEventFilter<SetMaxSlashFactorProposalCreatedEvent>;

export type SetMsgFeeProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  { proposalId: BigNumber; target: string; feeType: number; fee: BigNumber }
>;

export type SetMsgFeeProposalCreatedEventFilter =
  TypedEventFilter<SetMsgFeeProposalCreatedEvent>;

export type SetNativeWrapProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  { proposalId: BigNumber; target: string; token: string }
>;

export type SetNativeWrapProposalCreatedEventFilter =
  TypedEventFilter<SetNativeWrapProposalCreatedEvent>;

export type SetPreExecuteMessageGasUsageProposalCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { proposalId: BigNumber; target: string; usage: BigNumber }
>;

export type SetPreExecuteMessageGasUsageProposalCreatedEventFilter =
  TypedEventFilter<SetPreExecuteMessageGasUsageProposalCreatedEvent>;

export type SetRewardContractProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  { proposalId: BigNumber; target: string; addr: string }
>;

export type SetRewardContractProposalCreatedEventFilter =
  TypedEventFilter<SetRewardContractProposalCreatedEvent>;

export type SetWhitelistEnableProposalCreatedEvent = TypedEvent<
  [BigNumber, string, boolean],
  { proposalId: BigNumber; target: string; enabled: boolean }
>;

export type SetWhitelistEnableProposalCreatedEventFilter =
  TypedEventFilter<SetWhitelistEnableProposalCreatedEvent>;

export type TransferOwnershipProposalCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { proposalId: BigNumber; target: string; newOwner: BigNumber }
>;

export type TransferOwnershipProposalCreatedEventFilter =
  TypedEventFilter<TransferOwnershipProposalCreatedEvent>;

export type UpdateBridgeProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  { proposalId: BigNumber; target: string; bridgeAddr: string }
>;

export type UpdateBridgeProposalCreatedEventFilter =
  TypedEventFilter<UpdateBridgeProposalCreatedEvent>;

export type UpdateBridgeSupplyCapProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { proposalId: BigNumber; target: string; bridge: string; cap: BigNumber }
>;

export type UpdateBridgeSupplyCapProposalCreatedEventFilter =
  TypedEventFilter<UpdateBridgeSupplyCapProposalCreatedEvent>;

export type UpdateGovernorProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, string],
  { proposalId: BigNumber; target: string; action: number; account: string }
>;

export type UpdateGovernorProposalCreatedEventFilter =
  TypedEventFilter<UpdateGovernorProposalCreatedEvent>;

export type UpdatePauserProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, string],
  { proposalId: BigNumber; target: string; action: number; account: string }
>;

export type UpdatePauserProposalCreatedEventFilter =
  TypedEventFilter<UpdatePauserProposalCreatedEvent>;

export type UpdateSupplyProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, string, BigNumber],
  {
    proposalId: BigNumber;
    target: string;
    action: number;
    token: string;
    supply: BigNumber;
  }
>;

export type UpdateSupplyProposalCreatedEventFilter =
  TypedEventFilter<UpdateSupplyProposalCreatedEvent>;

export type UpdateWhitelistedProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, string],
  { proposalId: BigNumber; target: string; action: number; account: string }
>;

export type UpdateWhitelistedProposalCreatedEventFilter =
  TypedEventFilter<UpdateWhitelistedProposalCreatedEvent>;

export type UpgradeAndCallProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, string],
  {
    proposalId: BigNumber;
    target: string;
    proxy: string;
    implementation: string;
    data: string;
  }
>;

export type UpgradeAndCallProposalCreatedEventFilter =
  TypedEventFilter<UpgradeAndCallProposalCreatedEvent>;

export type UpgradeProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, string],
  {
    proposalId: BigNumber;
    target: string;
    proxy: string;
    implementation: string;
  }
>;

export type UpgradeProposalCreatedEventFilter =
  TypedEventFilter<UpgradeProposalCreatedEvent>;

export type UpgradeToAndCallProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, string],
  {
    proposalId: BigNumber;
    target: string;
    implementation: string;
    data: string;
  }
>;

export type UpgradeToAndCallProposalCreatedEventFilter =
  TypedEventFilter<UpgradeToAndCallProposalCreatedEvent>;

export type UpgradeToProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  { proposalId: BigNumber; target: string; implementation: string }
>;

export type UpgradeToProposalCreatedEventFilter =
  TypedEventFilter<UpgradeToProposalCreatedEvent>;

export interface GovernedOwnerProxy extends BaseContract {
  contractName: "GovernedOwnerProxy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernedOwnerProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gov(overrides?: CallOverrides): Promise<[string]>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeChangeProxyAdmin(
      _target: string,
      _proxy: string,
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeDrainToken(
      _target: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeIncreaseNoticePeriod(
      _target: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeNotifyResetSigners(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeResetSigners(
      _target: string,
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetBridgeAddress(
      _target: string,
      _bridgeType: BigNumberish,
      _bridgeAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetBridgeTokenSwapCap(
      _target: string,
      _bridgeToken: string,
      _swapCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetGovContract(
      _target: string,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetMaxSlashFactor(
      _target: string,
      _maxSlashFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetMsgFee(
      _target: string,
      _feeType: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetNativeWrap(
      _target: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetPreExecuteMessageGasUsage(
      _target: string,
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetRewardContract(
      _target: string,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetWhitelistEnable(
      _target: string,
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeTransferOwnership(
      _target: string,
      _newOwner: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpdateBridgeSupplyCap(
      _target: string,
      _bridge: string,
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpdateGovernor(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpdatePauser(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpdateSupply(
      _target: string,
      _action: BigNumberish,
      _token: string,
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpdateWhitelisted(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpgrade(
      _target: string,
      _proxy: string,
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpgradeAndCall(
      _target: string,
      _proxy: string,
      _implementation: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpgradeTo(
      _target: string,
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpgradeToAndCall(
      _target: string,
      _implementation: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  gov(overrides?: CallOverrides): Promise<string>;

  initGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeChangeProxyAdmin(
    _target: string,
    _proxy: string,
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeDrainToken(
    _target: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeIncreaseNoticePeriod(
    _target: string,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeNotifyResetSigners(
    _target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeResetSigners(
    _target: string,
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetBridgeAddress(
    _target: string,
    _bridgeType: BigNumberish,
    _bridgeAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetBridgeTokenSwapCap(
    _target: string,
    _bridgeToken: string,
    _swapCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetGovContract(
    _target: string,
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetMaxSlashFactor(
    _target: string,
    _maxSlashFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetMsgFee(
    _target: string,
    _feeType: BigNumberish,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetNativeWrap(
    _target: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetPreExecuteMessageGasUsage(
    _target: string,
    _usage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetRewardContract(
    _target: string,
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetWhitelistEnable(
    _target: string,
    _enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeTransferOwnership(
    _target: string,
    _newOwner: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpdateBridgeSupplyCap(
    _target: string,
    _bridge: string,
    _cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpdateGovernor(
    _target: string,
    _action: BigNumberish,
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpdatePauser(
    _target: string,
    _action: BigNumberish,
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpdateSupply(
    _target: string,
    _action: BigNumberish,
    _token: string,
    _supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpdateWhitelisted(
    _target: string,
    _action: BigNumberish,
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpgrade(
    _target: string,
    _proxy: string,
    _implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpgradeAndCall(
    _target: string,
    _proxy: string,
    _implementation: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpgradeTo(
    _target: string,
    _implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpgradeToAndCall(
    _target: string,
    _implementation: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    gov(overrides?: CallOverrides): Promise<string>;

    initGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    proposeChangeProxyAdmin(
      _target: string,
      _proxy: string,
      _newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeDrainToken(
      _target: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeIncreaseNoticePeriod(
      _target: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeNotifyResetSigners(
      _target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeResetSigners(
      _target: string,
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetBridgeAddress(
      _target: string,
      _bridgeType: BigNumberish,
      _bridgeAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetBridgeTokenSwapCap(
      _target: string,
      _bridgeToken: string,
      _swapCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetGovContract(
      _target: string,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetMaxSlashFactor(
      _target: string,
      _maxSlashFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetMsgFee(
      _target: string,
      _feeType: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetNativeWrap(
      _target: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetPreExecuteMessageGasUsage(
      _target: string,
      _usage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetRewardContract(
      _target: string,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetWhitelistEnable(
      _target: string,
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeTransferOwnership(
      _target: string,
      _newOwner: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpdateBridgeSupplyCap(
      _target: string,
      _bridge: string,
      _cap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpdateGovernor(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpdatePauser(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpdateSupply(
      _target: string,
      _action: BigNumberish,
      _token: string,
      _supply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpdateWhitelisted(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpgrade(
      _target: string,
      _proxy: string,
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpgradeAndCall(
      _target: string,
      _proxy: string,
      _implementation: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpgradeTo(
      _target: string,
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpgradeToAndCall(
      _target: string,
      _implementation: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangeProxyAdminProposalCreated(uint256,address,address,address)"(
      proposalId?: null,
      target?: null,
      proxy?: null,
      newAdmin?: null
    ): ChangeProxyAdminProposalCreatedEventFilter;
    ChangeProxyAdminProposalCreated(
      proposalId?: null,
      target?: null,
      proxy?: null,
      newAdmin?: null
    ): ChangeProxyAdminProposalCreatedEventFilter;

    "DrainTokenProposalCreated(uint256,address,address,uint256)"(
      proposalId?: null,
      target?: null,
      token?: null,
      amount?: null
    ): DrainTokenProposalCreatedEventFilter;
    DrainTokenProposalCreated(
      proposalId?: null,
      target?: null,
      token?: null,
      amount?: null
    ): DrainTokenProposalCreatedEventFilter;

    "IncreaseNoticePeriodProposalCreated(uint256,address,uint256)"(
      proposalId?: null,
      target?: null,
      period?: null
    ): IncreaseNoticePeriodProposalCreatedEventFilter;
    IncreaseNoticePeriodProposalCreated(
      proposalId?: null,
      target?: null,
      period?: null
    ): IncreaseNoticePeriodProposalCreatedEventFilter;

    "NotifyResetSignersProposalCreated(uint256,address)"(
      proposalId?: null,
      target?: null
    ): NotifyResetSignersProposalCreatedEventFilter;
    NotifyResetSignersProposalCreated(
      proposalId?: null,
      target?: null
    ): NotifyResetSignersProposalCreatedEventFilter;

    "ResetSignersProposalCreated(uint256,address,address[],uint256[])"(
      proposalId?: null,
      target?: null,
      signers?: null,
      powers?: null
    ): ResetSignersProposalCreatedEventFilter;
    ResetSignersProposalCreated(
      proposalId?: null,
      target?: null,
      signers?: null,
      powers?: null
    ): ResetSignersProposalCreatedEventFilter;

    "SetBridgeAddressProposalCreated(uint256,address,uint8,address)"(
      proposalId?: null,
      target?: null,
      bridgeType?: null,
      bridgeAddr?: null
    ): SetBridgeAddressProposalCreatedEventFilter;
    SetBridgeAddressProposalCreated(
      proposalId?: null,
      target?: null,
      bridgeType?: null,
      bridgeAddr?: null
    ): SetBridgeAddressProposalCreatedEventFilter;

    "SetBridgeTokenSwapCapProposalCreated(uint256,address,address,uint256)"(
      proposalId?: null,
      target?: null,
      bridgeToken?: null,
      cap?: null
    ): SetBridgeTokenSwapCapProposalCreatedEventFilter;
    SetBridgeTokenSwapCapProposalCreated(
      proposalId?: null,
      target?: null,
      bridgeToken?: null,
      cap?: null
    ): SetBridgeTokenSwapCapProposalCreatedEventFilter;

    "SetGovContractProposalCreated(uint256,address,address)"(
      proposalId?: null,
      target?: null,
      addr?: null
    ): SetGovContractProposalCreatedEventFilter;
    SetGovContractProposalCreated(
      proposalId?: null,
      target?: null,
      addr?: null
    ): SetGovContractProposalCreatedEventFilter;

    "SetMaxSlashFactorProposalCreated(uint256,address,uint256)"(
      proposalId?: null,
      target?: null,
      maxSlashFactor?: null
    ): SetMaxSlashFactorProposalCreatedEventFilter;
    SetMaxSlashFactorProposalCreated(
      proposalId?: null,
      target?: null,
      maxSlashFactor?: null
    ): SetMaxSlashFactorProposalCreatedEventFilter;

    "SetMsgFeeProposalCreated(uint256,address,uint8,uint256)"(
      proposalId?: null,
      target?: null,
      feeType?: null,
      fee?: null
    ): SetMsgFeeProposalCreatedEventFilter;
    SetMsgFeeProposalCreated(
      proposalId?: null,
      target?: null,
      feeType?: null,
      fee?: null
    ): SetMsgFeeProposalCreatedEventFilter;

    "SetNativeWrapProposalCreated(uint256,address,address)"(
      proposalId?: null,
      target?: null,
      token?: null
    ): SetNativeWrapProposalCreatedEventFilter;
    SetNativeWrapProposalCreated(
      proposalId?: null,
      target?: null,
      token?: null
    ): SetNativeWrapProposalCreatedEventFilter;

    "SetPreExecuteMessageGasUsageProposalCreated(uint256,address,uint256)"(
      proposalId?: null,
      target?: null,
      usage?: null
    ): SetPreExecuteMessageGasUsageProposalCreatedEventFilter;
    SetPreExecuteMessageGasUsageProposalCreated(
      proposalId?: null,
      target?: null,
      usage?: null
    ): SetPreExecuteMessageGasUsageProposalCreatedEventFilter;

    "SetRewardContractProposalCreated(uint256,address,address)"(
      proposalId?: null,
      target?: null,
      addr?: null
    ): SetRewardContractProposalCreatedEventFilter;
    SetRewardContractProposalCreated(
      proposalId?: null,
      target?: null,
      addr?: null
    ): SetRewardContractProposalCreatedEventFilter;

    "SetWhitelistEnableProposalCreated(uint256,address,bool)"(
      proposalId?: null,
      target?: null,
      enabled?: null
    ): SetWhitelistEnableProposalCreatedEventFilter;
    SetWhitelistEnableProposalCreated(
      proposalId?: null,
      target?: null,
      enabled?: null
    ): SetWhitelistEnableProposalCreatedEventFilter;

    "TransferOwnershipProposalCreated(uint256,address,uint256)"(
      proposalId?: null,
      target?: null,
      newOwner?: null
    ): TransferOwnershipProposalCreatedEventFilter;
    TransferOwnershipProposalCreated(
      proposalId?: null,
      target?: null,
      newOwner?: null
    ): TransferOwnershipProposalCreatedEventFilter;

    "UpdateBridgeProposalCreated(uint256,address,address)"(
      proposalId?: null,
      target?: null,
      bridgeAddr?: null
    ): UpdateBridgeProposalCreatedEventFilter;
    UpdateBridgeProposalCreated(
      proposalId?: null,
      target?: null,
      bridgeAddr?: null
    ): UpdateBridgeProposalCreatedEventFilter;

    "UpdateBridgeSupplyCapProposalCreated(uint256,address,address,uint256)"(
      proposalId?: null,
      target?: null,
      bridge?: null,
      cap?: null
    ): UpdateBridgeSupplyCapProposalCreatedEventFilter;
    UpdateBridgeSupplyCapProposalCreated(
      proposalId?: null,
      target?: null,
      bridge?: null,
      cap?: null
    ): UpdateBridgeSupplyCapProposalCreatedEventFilter;

    "UpdateGovernorProposalCreated(uint256,address,uint8,address)"(
      proposalId?: null,
      target?: null,
      action?: null,
      account?: null
    ): UpdateGovernorProposalCreatedEventFilter;
    UpdateGovernorProposalCreated(
      proposalId?: null,
      target?: null,
      action?: null,
      account?: null
    ): UpdateGovernorProposalCreatedEventFilter;

    "UpdatePauserProposalCreated(uint256,address,uint8,address)"(
      proposalId?: null,
      target?: null,
      action?: null,
      account?: null
    ): UpdatePauserProposalCreatedEventFilter;
    UpdatePauserProposalCreated(
      proposalId?: null,
      target?: null,
      action?: null,
      account?: null
    ): UpdatePauserProposalCreatedEventFilter;

    "UpdateSupplyProposalCreated(uint256,address,uint8,address,uint256)"(
      proposalId?: null,
      target?: null,
      action?: null,
      token?: null,
      supply?: null
    ): UpdateSupplyProposalCreatedEventFilter;
    UpdateSupplyProposalCreated(
      proposalId?: null,
      target?: null,
      action?: null,
      token?: null,
      supply?: null
    ): UpdateSupplyProposalCreatedEventFilter;

    "UpdateWhitelistedProposalCreated(uint256,address,uint8,address)"(
      proposalId?: null,
      target?: null,
      action?: null,
      account?: null
    ): UpdateWhitelistedProposalCreatedEventFilter;
    UpdateWhitelistedProposalCreated(
      proposalId?: null,
      target?: null,
      action?: null,
      account?: null
    ): UpdateWhitelistedProposalCreatedEventFilter;

    "UpgradeAndCallProposalCreated(uint256,address,address,address,bytes)"(
      proposalId?: null,
      target?: null,
      proxy?: null,
      implementation?: null,
      data?: null
    ): UpgradeAndCallProposalCreatedEventFilter;
    UpgradeAndCallProposalCreated(
      proposalId?: null,
      target?: null,
      proxy?: null,
      implementation?: null,
      data?: null
    ): UpgradeAndCallProposalCreatedEventFilter;

    "UpgradeProposalCreated(uint256,address,address,address)"(
      proposalId?: null,
      target?: null,
      proxy?: null,
      implementation?: null
    ): UpgradeProposalCreatedEventFilter;
    UpgradeProposalCreated(
      proposalId?: null,
      target?: null,
      proxy?: null,
      implementation?: null
    ): UpgradeProposalCreatedEventFilter;

    "UpgradeToAndCallProposalCreated(uint256,address,address,bytes)"(
      proposalId?: null,
      target?: null,
      implementation?: null,
      data?: null
    ): UpgradeToAndCallProposalCreatedEventFilter;
    UpgradeToAndCallProposalCreated(
      proposalId?: null,
      target?: null,
      implementation?: null,
      data?: null
    ): UpgradeToAndCallProposalCreatedEventFilter;

    "UpgradeToProposalCreated(uint256,address,address)"(
      proposalId?: null,
      target?: null,
      implementation?: null
    ): UpgradeToProposalCreatedEventFilter;
    UpgradeToProposalCreated(
      proposalId?: null,
      target?: null,
      implementation?: null
    ): UpgradeToProposalCreatedEventFilter;
  };

  estimateGas: {
    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeChangeProxyAdmin(
      _target: string,
      _proxy: string,
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeDrainToken(
      _target: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeIncreaseNoticePeriod(
      _target: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeNotifyResetSigners(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeResetSigners(
      _target: string,
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetBridgeAddress(
      _target: string,
      _bridgeType: BigNumberish,
      _bridgeAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetBridgeTokenSwapCap(
      _target: string,
      _bridgeToken: string,
      _swapCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetGovContract(
      _target: string,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetMaxSlashFactor(
      _target: string,
      _maxSlashFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetMsgFee(
      _target: string,
      _feeType: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetNativeWrap(
      _target: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetPreExecuteMessageGasUsage(
      _target: string,
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetRewardContract(
      _target: string,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetWhitelistEnable(
      _target: string,
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeTransferOwnership(
      _target: string,
      _newOwner: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpdateBridgeSupplyCap(
      _target: string,
      _bridge: string,
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpdateGovernor(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpdatePauser(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpdateSupply(
      _target: string,
      _action: BigNumberish,
      _token: string,
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpdateWhitelisted(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpgrade(
      _target: string,
      _proxy: string,
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpgradeAndCall(
      _target: string,
      _proxy: string,
      _implementation: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpgradeTo(
      _target: string,
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpgradeToAndCall(
      _target: string,
      _implementation: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeChangeProxyAdmin(
      _target: string,
      _proxy: string,
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeDrainToken(
      _target: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeIncreaseNoticePeriod(
      _target: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeNotifyResetSigners(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeResetSigners(
      _target: string,
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetBridgeAddress(
      _target: string,
      _bridgeType: BigNumberish,
      _bridgeAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetBridgeTokenSwapCap(
      _target: string,
      _bridgeToken: string,
      _swapCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetGovContract(
      _target: string,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetMaxSlashFactor(
      _target: string,
      _maxSlashFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetMsgFee(
      _target: string,
      _feeType: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetNativeWrap(
      _target: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetPreExecuteMessageGasUsage(
      _target: string,
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetRewardContract(
      _target: string,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetWhitelistEnable(
      _target: string,
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeTransferOwnership(
      _target: string,
      _newOwner: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpdateBridgeSupplyCap(
      _target: string,
      _bridge: string,
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpdateGovernor(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpdatePauser(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpdateSupply(
      _target: string,
      _action: BigNumberish,
      _token: string,
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpdateWhitelisted(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpgrade(
      _target: string,
      _proxy: string,
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpgradeAndCall(
      _target: string,
      _proxy: string,
      _implementation: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpgradeTo(
      _target: string,
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpgradeToAndCall(
      _target: string,
      _implementation: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
