/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BridgeOwnerProxyInterface extends utils.Interface {
  contractName: "BridgeOwnerProxy";
  functions: {
    "gov()": FunctionFragment;
    "initGov(address)": FunctionFragment;
    "proposeIncreaseNoticePeriod(address,uint256)": FunctionFragment;
    "proposeNotifyResetSigners(address)": FunctionFragment;
    "proposeResetSigners(address,address[],uint256[])": FunctionFragment;
    "proposeSetBridgeTokenSwapCap(address,address,uint256)": FunctionFragment;
    "proposeSetNativeWrap(address,address)": FunctionFragment;
    "proposeUpdateBridgeSupplyCap(address,address,uint256)": FunctionFragment;
    "proposeUpdateGovernor(address,uint8,address)": FunctionFragment;
    "proposeUpdateSupply(address,uint8,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "initGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proposeIncreaseNoticePeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNotifyResetSigners",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeResetSigners",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetBridgeTokenSwapCap",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSetNativeWrap",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpdateBridgeSupplyCap",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpdateGovernor",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeUpdateSupply",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeIncreaseNoticePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNotifyResetSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeResetSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetBridgeTokenSwapCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSetNativeWrap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpdateBridgeSupplyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpdateGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpdateSupply",
    data: BytesLike
  ): Result;

  events: {
    "IncreaseNoticePeriodProposalCreated(uint256,address,uint256)": EventFragment;
    "NotifyResetSignersProposalCreated(uint256,address)": EventFragment;
    "ResetSignersProposalCreated(uint256,address,address[],uint256[])": EventFragment;
    "SetBridgeTokenSwapCapProposalCreated(uint256,address,address,uint256)": EventFragment;
    "SetNativeWrapProposalCreated(uint256,address,address)": EventFragment;
    "UpdateBridgeProposalCreated(uint256,address,address)": EventFragment;
    "UpdateBridgeSupplyCapProposalCreated(uint256,address,address,uint256)": EventFragment;
    "UpdateGovernorProposalCreated(uint256,address,uint8,address)": EventFragment;
    "UpdateSupplyProposalCreated(uint256,address,uint8,address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "IncreaseNoticePeriodProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NotifyResetSignersProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ResetSignersProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetBridgeTokenSwapCapProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetNativeWrapProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateBridgeProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateBridgeSupplyCapProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateGovernorProposalCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateSupplyProposalCreated"
  ): EventFragment;
}

export type IncreaseNoticePeriodProposalCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { proposalId: BigNumber; target: string; period: BigNumber }
>;

export type IncreaseNoticePeriodProposalCreatedEventFilter =
  TypedEventFilter<IncreaseNoticePeriodProposalCreatedEvent>;

export type NotifyResetSignersProposalCreatedEvent = TypedEvent<
  [BigNumber, string],
  { proposalId: BigNumber; target: string }
>;

export type NotifyResetSignersProposalCreatedEventFilter =
  TypedEventFilter<NotifyResetSignersProposalCreatedEvent>;

export type ResetSignersProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string[], BigNumber[]],
  {
    proposalId: BigNumber;
    target: string;
    signers: string[];
    powers: BigNumber[];
  }
>;

export type ResetSignersProposalCreatedEventFilter =
  TypedEventFilter<ResetSignersProposalCreatedEvent>;

export type SetBridgeTokenSwapCapProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { proposalId: BigNumber; target: string; bridgeToken: string; cap: BigNumber }
>;

export type SetBridgeTokenSwapCapProposalCreatedEventFilter =
  TypedEventFilter<SetBridgeTokenSwapCapProposalCreatedEvent>;

export type SetNativeWrapProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  { proposalId: BigNumber; target: string; token: string }
>;

export type SetNativeWrapProposalCreatedEventFilter =
  TypedEventFilter<SetNativeWrapProposalCreatedEvent>;

export type UpdateBridgeProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  { proposalId: BigNumber; target: string; bridgeAddr: string }
>;

export type UpdateBridgeProposalCreatedEventFilter =
  TypedEventFilter<UpdateBridgeProposalCreatedEvent>;

export type UpdateBridgeSupplyCapProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { proposalId: BigNumber; target: string; bridge: string; cap: BigNumber }
>;

export type UpdateBridgeSupplyCapProposalCreatedEventFilter =
  TypedEventFilter<UpdateBridgeSupplyCapProposalCreatedEvent>;

export type UpdateGovernorProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, string],
  { proposalId: BigNumber; target: string; action: number; account: string }
>;

export type UpdateGovernorProposalCreatedEventFilter =
  TypedEventFilter<UpdateGovernorProposalCreatedEvent>;

export type UpdateSupplyProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, string, BigNumber],
  {
    proposalId: BigNumber;
    target: string;
    action: number;
    token: string;
    supply: BigNumber;
  }
>;

export type UpdateSupplyProposalCreatedEventFilter =
  TypedEventFilter<UpdateSupplyProposalCreatedEvent>;

export interface BridgeOwnerProxy extends BaseContract {
  contractName: "BridgeOwnerProxy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeOwnerProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gov(overrides?: CallOverrides): Promise<[string]>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeIncreaseNoticePeriod(
      _target: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeNotifyResetSigners(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeResetSigners(
      _target: string,
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetBridgeTokenSwapCap(
      _target: string,
      _bridgeToken: string,
      _swapCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeSetNativeWrap(
      _target: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpdateBridgeSupplyCap(
      _target: string,
      _bridge: string,
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpdateGovernor(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeUpdateSupply(
      _target: string,
      _action: BigNumberish,
      _token: string,
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  gov(overrides?: CallOverrides): Promise<string>;

  initGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeIncreaseNoticePeriod(
    _target: string,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeNotifyResetSigners(
    _target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeResetSigners(
    _target: string,
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetBridgeTokenSwapCap(
    _target: string,
    _bridgeToken: string,
    _swapCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeSetNativeWrap(
    _target: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpdateBridgeSupplyCap(
    _target: string,
    _bridge: string,
    _cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpdateGovernor(
    _target: string,
    _action: BigNumberish,
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeUpdateSupply(
    _target: string,
    _action: BigNumberish,
    _token: string,
    _supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    gov(overrides?: CallOverrides): Promise<string>;

    initGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    proposeIncreaseNoticePeriod(
      _target: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeNotifyResetSigners(
      _target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeResetSigners(
      _target: string,
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetBridgeTokenSwapCap(
      _target: string,
      _bridgeToken: string,
      _swapCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeSetNativeWrap(
      _target: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpdateBridgeSupplyCap(
      _target: string,
      _bridge: string,
      _cap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpdateGovernor(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeUpdateSupply(
      _target: string,
      _action: BigNumberish,
      _token: string,
      _supply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "IncreaseNoticePeriodProposalCreated(uint256,address,uint256)"(
      proposalId?: null,
      target?: null,
      period?: null
    ): IncreaseNoticePeriodProposalCreatedEventFilter;
    IncreaseNoticePeriodProposalCreated(
      proposalId?: null,
      target?: null,
      period?: null
    ): IncreaseNoticePeriodProposalCreatedEventFilter;

    "NotifyResetSignersProposalCreated(uint256,address)"(
      proposalId?: null,
      target?: null
    ): NotifyResetSignersProposalCreatedEventFilter;
    NotifyResetSignersProposalCreated(
      proposalId?: null,
      target?: null
    ): NotifyResetSignersProposalCreatedEventFilter;

    "ResetSignersProposalCreated(uint256,address,address[],uint256[])"(
      proposalId?: null,
      target?: null,
      signers?: null,
      powers?: null
    ): ResetSignersProposalCreatedEventFilter;
    ResetSignersProposalCreated(
      proposalId?: null,
      target?: null,
      signers?: null,
      powers?: null
    ): ResetSignersProposalCreatedEventFilter;

    "SetBridgeTokenSwapCapProposalCreated(uint256,address,address,uint256)"(
      proposalId?: null,
      target?: null,
      bridgeToken?: null,
      cap?: null
    ): SetBridgeTokenSwapCapProposalCreatedEventFilter;
    SetBridgeTokenSwapCapProposalCreated(
      proposalId?: null,
      target?: null,
      bridgeToken?: null,
      cap?: null
    ): SetBridgeTokenSwapCapProposalCreatedEventFilter;

    "SetNativeWrapProposalCreated(uint256,address,address)"(
      proposalId?: null,
      target?: null,
      token?: null
    ): SetNativeWrapProposalCreatedEventFilter;
    SetNativeWrapProposalCreated(
      proposalId?: null,
      target?: null,
      token?: null
    ): SetNativeWrapProposalCreatedEventFilter;

    "UpdateBridgeProposalCreated(uint256,address,address)"(
      proposalId?: null,
      target?: null,
      bridgeAddr?: null
    ): UpdateBridgeProposalCreatedEventFilter;
    UpdateBridgeProposalCreated(
      proposalId?: null,
      target?: null,
      bridgeAddr?: null
    ): UpdateBridgeProposalCreatedEventFilter;

    "UpdateBridgeSupplyCapProposalCreated(uint256,address,address,uint256)"(
      proposalId?: null,
      target?: null,
      bridge?: null,
      cap?: null
    ): UpdateBridgeSupplyCapProposalCreatedEventFilter;
    UpdateBridgeSupplyCapProposalCreated(
      proposalId?: null,
      target?: null,
      bridge?: null,
      cap?: null
    ): UpdateBridgeSupplyCapProposalCreatedEventFilter;

    "UpdateGovernorProposalCreated(uint256,address,uint8,address)"(
      proposalId?: null,
      target?: null,
      action?: null,
      account?: null
    ): UpdateGovernorProposalCreatedEventFilter;
    UpdateGovernorProposalCreated(
      proposalId?: null,
      target?: null,
      action?: null,
      account?: null
    ): UpdateGovernorProposalCreatedEventFilter;

    "UpdateSupplyProposalCreated(uint256,address,uint8,address,uint256)"(
      proposalId?: null,
      target?: null,
      action?: null,
      token?: null,
      supply?: null
    ): UpdateSupplyProposalCreatedEventFilter;
    UpdateSupplyProposalCreated(
      proposalId?: null,
      target?: null,
      action?: null,
      token?: null,
      supply?: null
    ): UpdateSupplyProposalCreatedEventFilter;
  };

  estimateGas: {
    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeIncreaseNoticePeriod(
      _target: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeNotifyResetSigners(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeResetSigners(
      _target: string,
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetBridgeTokenSwapCap(
      _target: string,
      _bridgeToken: string,
      _swapCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeSetNativeWrap(
      _target: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpdateBridgeSupplyCap(
      _target: string,
      _bridge: string,
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpdateGovernor(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeUpdateSupply(
      _target: string,
      _action: BigNumberish,
      _token: string,
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeIncreaseNoticePeriod(
      _target: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeNotifyResetSigners(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeResetSigners(
      _target: string,
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetBridgeTokenSwapCap(
      _target: string,
      _bridgeToken: string,
      _swapCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeSetNativeWrap(
      _target: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpdateBridgeSupplyCap(
      _target: string,
      _bridge: string,
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpdateGovernor(
      _target: string,
      _action: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeUpdateSupply(
      _target: string,
      _action: BigNumberish,
      _token: string,
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
