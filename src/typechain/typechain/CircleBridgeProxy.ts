/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CircleBridgeProxyInterface extends utils.Interface {
  contractName: "CircleBridgeProxy";
  functions: {
    "addGovernor(address)": FunctionFragment;
    "chidToDomain(uint64)": FunctionFragment;
    "circleBridge()": FunctionFragment;
    "collectFee(address[],address)": FunctionFragment;
    "depositForBurn(uint256,uint64,bytes32,address)": FunctionFragment;
    "dstTxFee(uint64)": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "feePercGlobal()": FunctionFragment;
    "feePercOverride(uint64)": FunctionFragment;
    "governors(address)": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeGovernor(address)": FunctionFragment;
    "renounceGovernor()": FunctionFragment;
    "setChidToDomain(uint64[],int32[])": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setFeePerc(uint64[],uint32[])": FunctionFragment;
    "setTxFee(uint64[],uint256[])": FunctionFragment;
    "totalFee(uint256,uint64)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addGovernor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "chidToDomain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "circleBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositForBurn",
    values: [BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dstTxFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercGlobal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercOverride",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "governors", values: [string]): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setChidToDomain",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePerc",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTxFee",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chidToDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circleBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositForBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dstTxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercGlobal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChidToDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeePerc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ChidToDomainUpdated(uint64[],int32[])": EventFragment;
    "Deposited(address,bytes32,uint64,uint256,uint256,uint256,uint64)": EventFragment;
    "FeeCollectorUpdated(address,address)": EventFragment;
    "FeePercUpdated(uint64[],uint32[])": EventFragment;
    "GovernorAdded(address)": EventFragment;
    "GovernorRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TxFeeUpdated(uint64[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChidToDomainUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollectorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePercUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxFeeUpdated"): EventFragment;
}

export type ChidToDomainUpdatedEvent = TypedEvent<
  [BigNumber[], number[]],
  { chainIds: BigNumber[]; domains: number[] }
>;

export type ChidToDomainUpdatedEventFilter =
  TypedEventFilter<ChidToDomainUpdatedEvent>;

export type DepositedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    sender: string;
    recipient: string;
    dstChid: BigNumber;
    amount: BigNumber;
    txFee: BigNumber;
    percFee: BigNumber;
    nonce: BigNumber;
  }
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export type FeeCollectorUpdatedEvent = TypedEvent<
  [string, string],
  { from: string; to: string }
>;

export type FeeCollectorUpdatedEventFilter =
  TypedEventFilter<FeeCollectorUpdatedEvent>;

export type FeePercUpdatedEvent = TypedEvent<
  [BigNumber[], number[]],
  { chainIds: BigNumber[]; feePercs: number[] }
>;

export type FeePercUpdatedEventFilter = TypedEventFilter<FeePercUpdatedEvent>;

export type GovernorAddedEvent = TypedEvent<[string], { account: string }>;

export type GovernorAddedEventFilter = TypedEventFilter<GovernorAddedEvent>;

export type GovernorRemovedEvent = TypedEvent<[string], { account: string }>;

export type GovernorRemovedEventFilter = TypedEventFilter<GovernorRemovedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TxFeeUpdatedEvent = TypedEvent<
  [BigNumber[], BigNumber[]],
  { chainIds: BigNumber[]; fees: BigNumber[] }
>;

export type TxFeeUpdatedEventFilter = TypedEventFilter<TxFeeUpdatedEvent>;

export interface CircleBridgeProxy extends BaseContract {
  contractName: "CircleBridgeProxy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CircleBridgeProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chidToDomain(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    circleBridge(overrides?: CallOverrides): Promise<[string]>;

    collectFee(
      _tokens: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositForBurn(
      _amount: BigNumberish,
      _dstChid: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dstTxFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    feePercGlobal(overrides?: CallOverrides): Promise<[number]>;

    feePercOverride(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    governors(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChidToDomain(
      _chainIds: BigNumberish[],
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeePerc(
      _chainIds: BigNumberish[],
      _feePercs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTxFee(
      _chainIds: BigNumberish[],
      _fees: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalFee(
      _amount: BigNumberish,
      _dstChid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _fee: BigNumber;
        _txFee: BigNumber;
        _percFee: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addGovernor(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chidToDomain(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  circleBridge(overrides?: CallOverrides): Promise<string>;

  collectFee(
    _tokens: string[],
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositForBurn(
    _amount: BigNumberish,
    _dstChid: BigNumberish,
    _mintRecipient: BytesLike,
    _burnToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dstTxFee(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  feePercGlobal(overrides?: CallOverrides): Promise<number>;

  feePercOverride(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  governors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeGovernor(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceGovernor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChidToDomain(
    _chainIds: BigNumberish[],
    _domains: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _feeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeePerc(
    _chainIds: BigNumberish[],
    _feePercs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTxFee(
    _chainIds: BigNumberish[],
    _fees: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalFee(
    _amount: BigNumberish,
    _dstChid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _fee: BigNumber;
      _txFee: BigNumber;
      _percFee: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGovernor(_account: string, overrides?: CallOverrides): Promise<void>;

    chidToDomain(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    circleBridge(overrides?: CallOverrides): Promise<string>;

    collectFee(
      _tokens: string[],
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositForBurn(
      _amount: BigNumberish,
      _dstChid: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dstTxFee(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    feePercGlobal(overrides?: CallOverrides): Promise<number>;

    feePercOverride(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    governors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeGovernor(_account: string, overrides?: CallOverrides): Promise<void>;

    renounceGovernor(overrides?: CallOverrides): Promise<void>;

    setChidToDomain(
      _chainIds: BigNumberish[],
      _domains: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeePerc(
      _chainIds: BigNumberish[],
      _feePercs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTxFee(
      _chainIds: BigNumberish[],
      _fees: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    totalFee(
      _amount: BigNumberish,
      _dstChid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _fee: BigNumber;
        _txFee: BigNumber;
        _percFee: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChidToDomainUpdated(uint64[],int32[])"(
      chainIds?: null,
      domains?: null
    ): ChidToDomainUpdatedEventFilter;
    ChidToDomainUpdated(
      chainIds?: null,
      domains?: null
    ): ChidToDomainUpdatedEventFilter;

    "Deposited(address,bytes32,uint64,uint256,uint256,uint256,uint64)"(
      sender?: null,
      recipient?: null,
      dstChid?: null,
      amount?: null,
      txFee?: null,
      percFee?: null,
      nonce?: null
    ): DepositedEventFilter;
    Deposited(
      sender?: null,
      recipient?: null,
      dstChid?: null,
      amount?: null,
      txFee?: null,
      percFee?: null,
      nonce?: null
    ): DepositedEventFilter;

    "FeeCollectorUpdated(address,address)"(
      from?: null,
      to?: null
    ): FeeCollectorUpdatedEventFilter;
    FeeCollectorUpdated(from?: null, to?: null): FeeCollectorUpdatedEventFilter;

    "FeePercUpdated(uint64[],uint32[])"(
      chainIds?: null,
      feePercs?: null
    ): FeePercUpdatedEventFilter;
    FeePercUpdated(chainIds?: null, feePercs?: null): FeePercUpdatedEventFilter;

    "GovernorAdded(address)"(account?: null): GovernorAddedEventFilter;
    GovernorAdded(account?: null): GovernorAddedEventFilter;

    "GovernorRemoved(address)"(account?: null): GovernorRemovedEventFilter;
    GovernorRemoved(account?: null): GovernorRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TxFeeUpdated(uint64[],uint256[])"(
      chainIds?: null,
      fees?: null
    ): TxFeeUpdatedEventFilter;
    TxFeeUpdated(chainIds?: null, fees?: null): TxFeeUpdatedEventFilter;
  };

  estimateGas: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chidToDomain(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    circleBridge(overrides?: CallOverrides): Promise<BigNumber>;

    collectFee(
      _tokens: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositForBurn(
      _amount: BigNumberish,
      _dstChid: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dstTxFee(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    feePercGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    feePercOverride(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChidToDomain(
      _chainIds: BigNumberish[],
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeePerc(
      _chainIds: BigNumberish[],
      _feePercs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTxFee(
      _chainIds: BigNumberish[],
      _fees: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalFee(
      _amount: BigNumberish,
      _dstChid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chidToDomain(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    circleBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectFee(
      _tokens: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositForBurn(
      _amount: BigNumberish,
      _dstChid: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dstTxFee(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercGlobal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercOverride(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChidToDomain(
      _chainIds: BigNumberish[],
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeePerc(
      _chainIds: BigNumberish[],
      _feePercs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTxFee(
      _chainIds: BigNumberish[],
      _fees: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalFee(
      _amount: BigNumberish,
      _dstChid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
